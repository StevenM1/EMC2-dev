# Set seed for mclapply
RNGkind("L'Ecuyer-CMRG")
set.seed(123)
# Run the models for the different variants
# Only preburn, so bit risky since adapt could fail
N <- 50
LNR_factor <- init_chains(LNR_factor, cores_for_chains = 1, particles = 10)
LNR_factor <- run_emc(LNR_factor, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_diag <- init_chains(LNR_diag, cores_for_chains = 1, particles = 10)
LNR_diag <- run_emc(LNR_diag, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_blocked <- init_chains(LNR_blocked, cores_for_chains = 1, particles = 10)
LNR_blocked <- run_emc(LNR_blocked, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_single <- init_chains(LNR_single, cores_for_chains = 1, particles = 10)
LNR_single <- run_emc(LNR_single, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1),
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
devtools::load_all()
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
# When working with lM it is useful to design  an "average and difference"
# contrast matrix, which for binary responses has a simple canonical from:
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d"))
# We also define a match function for lM
matchfun=function(d)d$S==d$lR
# Drop most subjects
dat <- forstmann[forstmann$subjects %in% unique(forstmann$subjects)[1:2],]
dat$subjects <- droplevels(dat$subjects)
design_LNR <- design(data = dat,model=LNR,matchfun=matchfun,
formula=list(m~lM,s~1,t0~1),
contrasts=list(m=list(lM=ADmat)))
# create emc objects for the different types
LNR_factor <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "factor",
n_factors = 2)
LNR_diag <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "diagonal")
LNR_blocked <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "blocked",
par_groups = c(1,2,3,3))
LNR_single <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "single")
# Set seed for mclapply
RNGkind("L'Ecuyer-CMRG")
set.seed(123)
# Run the models for the different variants
# Only preburn, so bit risky since adapt could fail
N <- 50
LNR_factor <- init_chains(LNR_factor, cores_for_chains = 1, particles = 10)
LNR_factor <- run_emc(LNR_factor, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_diag <- init_chains(LNR_diag, cores_for_chains = 1, particles = 10)
LNR_diag <- run_emc(LNR_diag, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_blocked <- init_chains(LNR_blocked, cores_for_chains = 1, particles = 10)
LNR_blocked <- run_emc(LNR_blocked, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_single <- init_chains(LNR_single, cores_for_chains = 1, particles = 10)
LNR_single <- run_emc(LNR_single, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
debug(get_objects_factor)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
selection
# When working with lM it is useful to design  an "average and difference"
# contrast matrix, which for binary responses has a simple canonical from:
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d"))
# We also define a match function for lM
matchfun=function(d)d$S==d$lR
# Drop most subjects
dat <- forstmann[forstmann$subjects %in% unique(forstmann$subjects)[1:2],]
dat$subjects <- droplevels(dat$subjects)
design_LNR <- design(data = dat,model=LNR,matchfun=matchfun,
formula=list(m~lM,s~1,t0~1),
contrasts=list(m=list(lM=ADmat)))
# create emc objects for the different types
LNR_factor <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "factor",
n_factors = 2)
LNR_diag <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "diagonal")
LNR_blocked <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "blocked",
par_groups = c(1,2,3,3))
LNR_single <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "single")
# Set seed for mclapply
RNGkind("L'Ecuyer-CMRG")
set.seed(123)
# Run the models for the different variants
# Only preburn, so bit risky since adapt could fail
N <- 50
LNR_factor <- init_chains(LNR_factor, cores_for_chains = 1, particles = 10)
LNR_factor <- run_emc(LNR_factor, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_diag <- init_chains(LNR_diag, cores_for_chains = 1, particles = 10)
LNR_diag <- run_emc(LNR_diag, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_blocked <- init_chains(LNR_blocked, cores_for_chains = 1, particles = 10)
LNR_blocked <- run_emc(LNR_blocked, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_single <- init_chains(LNR_single, cores_for_chains = 1, particles = 10)
LNR_single <- run_emc(LNR_single, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
devtools::load_all()
# When working with lM it is useful to design  an "average and difference"
# contrast matrix, which for binary responses has a simple canonical from:
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d"))
# We also define a match function for lM
matchfun=function(d)d$S==d$lR
# Drop most subjects
dat <- forstmann[forstmann$subjects %in% unique(forstmann$subjects)[1:2],]
dat$subjects <- droplevels(dat$subjects)
design_LNR <- design(data = dat,model=LNR,matchfun=matchfun,
formula=list(m~lM,s~1,t0~1),
contrasts=list(m=list(lM=ADmat)))
# create emc objects for the different types
LNR_factor <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "factor",
n_factors = 2)
LNR_diag <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "diagonal")
LNR_blocked <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "blocked",
par_groups = c(1,2,3,3))
LNR_single <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "single")
# Set seed for mclapply
RNGkind("L'Ecuyer-CMRG")
set.seed(123)
# Run the models for the different variants
# Only preburn, so bit risky since adapt could fail
N <- 50
LNR_factor <- init_chains(LNR_factor, cores_for_chains = 1, particles = 10)
LNR_factor <- run_emc(LNR_factor, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_diag <- init_chains(LNR_diag, cores_for_chains = 1, particles = 10)
LNR_diag <- run_emc(LNR_diag, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_blocked <- init_chains(LNR_blocked, cores_for_chains = 1, particles = 10)
LNR_blocked <- run_emc(LNR_blocked, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_single <- init_chains(LNR_single, cores_for_chains = 1, particles = 10)
LNR_single <- run_emc(LNR_single, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
debug(ess_summary.emc)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
debug(get_summary_stat)
dots
do.call(get_pars, c(list(emc = emc, selection = selection), fix_dots(dots, get_pars)))
# When working with lM it is useful to design  an "average and difference"
# contrast matrix, which for binary responses has a simple canonical from:
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d"))
# We also define a match function for lM
matchfun=function(d)d$S==d$lR
# Drop most subjects
dat <- forstmann[forstmann$subjects %in% unique(forstmann$subjects)[1:2],]
dat$subjects <- droplevels(dat$subjects)
design_LNR <- design(data = dat,model=LNR,matchfun=matchfun,
formula=list(m~lM,s~1,t0~1),
contrasts=list(m=list(lM=ADmat)))
# create emc objects for the different types
LNR_factor <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "factor",
n_factors = 2)
LNR_diag <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "diagonal")
LNR_blocked <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "blocked",
par_groups = c(1,2,3,3))
LNR_single <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "single")
# Set seed for mclapply
RNGkind("L'Ecuyer-CMRG")
set.seed(123)
# Run the models for the different variants
# Only preburn, so bit risky since adapt could fail
N <- 50
LNR_factor <- init_chains(LNR_factor, cores_for_chains = 1, particles = 10)
LNR_factor <- run_emc(LNR_factor, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_diag <- init_chains(LNR_diag, cores_for_chains = 1, particles = 10)
LNR_diag <- run_emc(LNR_diag, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_blocked <- init_chains(LNR_blocked, cores_for_chains = 1, particles = 10)
LNR_blocked <- run_emc(LNR_blocked, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_single <- init_chains(LNR_single, cores_for_chains = 1, particles = 10)
LNR_single <- run_emc(LNR_single, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
debug(run_bridge_sampling)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1),
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
devtools::load_all()
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
debug(IC)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
Dmeans
minDs
mean_lls
mean_pars_lls
mean_pars
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
ll
emc[[1]]$samples$alpha
mean_lls
alpha
ll
length(alpha)
alpha
debug(get_pars)
get_pars(emc,selection="alpha",filter=filter,subfilter=subfilter, by_subject = TRUE, merge_chains = TRUE)
subject
samples
subnames
samples
apply(samples, 2, sd)
samples
devtools::load_all()
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
debug(filter_const_and_dup)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
x
devtools::load_all()
debug(filter_const_and_dup)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
dim(samples[[1]])
samples
x
devtools::load_all()
debug(IC)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
mean_pars_lls
devtools::load_all()
debug(IC)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
debug(get_pars)
samples
filter_const_and_dup(samples, remove_dup)
debug(filter_const_and_dup)
filter_const_and_dup(samples, remove_dup)
x
devtools::load_all()
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
debug(IC)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
mean_pars_lls
Dmeans
mean_pars_lls
group_stats
mean_lls
mean_lls
Dmeans
minDs
attr(emc[[1]], "variant_funs")$group_IC(emc, filter=filter,subfilter=subfilter)
debug(attr(emc[[1]], "variant_funs")$group_IC)
attr(emc[[1]], "variant_funs")$group_IC(emc, filter=filter,subfilter=subfilter)
theta_var
get_pars(emc, selection = "sigma2", filter = filter, subfilter = subfilter,
return_mcmc = FALSE, merge_chains = TRUE)
theta_var <- get_pars(emc, selection = "Sigma", filter = filter, subfilter = subfilter,
return_mcmc = FALSE, merge_chains = TRUE, remove_dup = F)
theta_var
debug(get_pars)
theta_var <- get_pars(emc, selection = "Sigma", filter = filter, subfilter = subfilter,
return_mcmc = FALSE, merge_chains = TRUE, remove_dup = F)
remove_dup
samples
debug(filter_const_and_dup)
filter_const_and_dup(samples, remove_dup)
is_constant
devtools::load_all()
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
.rs.restartR()
devtools::load_all()
debug(group__IC_standard)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
devtools::load_all()
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
debug(IC)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", BayesFactor = F)
filter
subfilter
attr(emc[[1]], "variant_funs")$group_IC(emc, filter=filter,subfilter=subfilter)
attr(emc[[1]], "variant_funs")$group_IC(emc, filter=filter,subfilter=subfilter)
debug(attr(emc[[1]], "variant_funs")$group_IC)
attr(emc[[1]], "variant_funs")$group_IC(emc, filter=filter,subfilter=subfilter)
get_pars(emc, selection = "alpha", filter = filter, subfilter = subfilter,
return_mcmc = FALSE, merge_chains = TRUE)
debug(get_pars)
get_pars(emc, selection = "alpha", filter = filter, subfilter = subfilter,
return_mcmc = FALSE, merge_chains = TRUE)
devtools::load_all()
attr(samples_LNR[[1]], "variant_funs")
attr(samples_LNR[[1]], "variant_funs")$group_IC
attr(samples_LNR[[1]], "variant_funs") <- get_variant_funs
attr(samples_LNR[[1]], "variant_funs")$group_IC
attr(samples_LNR[[1]], "variant_funs") <- get_variant_funs()
attr(samples_LNR[[1]], "variant_funs")$group_IC
attr(samples_LNR[[2]], "variant_funs") <- get_variant_funs()
attr(samples_LNR[[3]], "variant_funs") <- get_variant_funs()
save(samples_LNR, file = "data/samples_LNR.rda")
.rs.restartR()
.rs.restartR()
devtools::test()
# When working with lM it is useful to design  an "average and difference"
# contrast matrix, which for binary responses has a simple canonical from:
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d"))
# We also define a match function for lM
matchfun=function(d)d$S==d$lR
# Drop most subjects
dat <- forstmann[forstmann$subjects %in% unique(forstmann$subjects)[1:2],]
devtools::load_all()
# When working with lM it is useful to design  an "average and difference"
# contrast matrix, which for binary responses has a simple canonical from:
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d"))
# We also define a match function for lM
matchfun=function(d)d$S==d$lR
# Drop most subjects
dat <- forstmann[forstmann$subjects %in% unique(forstmann$subjects)[1:2],]
dat$subjects <- droplevels(dat$subjects)
design_LNR <- design(data = dat,model=LNR,matchfun=matchfun,
formula=list(m~lM,s~1,t0~1),
contrasts=list(m=list(lM=ADmat)))
# create emc objects for the different types
LNR_factor <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "factor",
n_factors = 2)
LNR_diag <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "diagonal")
LNR_blocked <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "blocked",
par_groups = c(1,2,3,3))
LNR_single <- make_emc(dat, design_LNR, rt_resolution = 0.05, n_chains = 2, type = "single")
# Set seed for mclapply
RNGkind("L'Ecuyer-CMRG")
set.seed(123)
# Run the models for the different variants
# Only preburn, so bit risky since adapt could fail
N <- 50
LNR_factor <- init_chains(LNR_factor, cores_for_chains = 1, particles = 10)
LNR_factor <- run_emc(LNR_factor, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_diag <- init_chains(LNR_diag, cores_for_chains = 1, particles = 10)
LNR_diag <- run_emc(LNR_diag, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_blocked <- init_chains(LNR_blocked, cores_for_chains = 1, particles = 10)
LNR_blocked <- run_emc(LNR_blocked, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
LNR_single <- init_chains(LNR_single, cores_for_chains = 1, particles = 10)
LNR_single <- run_emc(LNR_single, cores_for_chains = 1, stop_criteria = list(iter = N), stage = "preburn")
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
debug(get_idx)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1),
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
stage
debug(IC)
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
stage
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1),
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), filter = "preburn", cores_for_props = 1)
stage
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), stage = "preburn", cores_for_props = 1)
f
.rs.restartR()
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), stage = "preburn", cores_for_props = 1)
devtools::load_all()
compare(list(single = LNR_single, diag = LNR_diag, factor = LNR_factor), stage = "preburn", cores_for_props = 1)
load("/home/niek/Downloads/SEM_LNR_with_G_large.RData")
emc <- subset(emc, length.out = 1000)
devtools::load_all()
plot_pars(emc, plot_prior = F, selection = "loadings")
plot_pars(emc, plot_prior = F, selection = "K")
plot_pars(emc, plot_prior = F, selection = "mu_implied")
debug(get_pars)
summary_gd(emc, plot_prior = F, selection = "mu_implied")
debug(get_pars)
gd_summary(emc, plot_prior = F, selection = "mu_implied")
debug(get_objects)
debug(get_objects_SEM)
devtools::load_all()
devtools::load_all()
debug(get_objects_SEM)
gd_summary(emc, plot_prior = F, selection = "mu_implied")
idx
devtools::load_all()
gd_summary(emc, plot_prior = F, selection = "mu_implied")
emc[[1]]$covariates
devtools::load_all()
gd_summary(emc, plot_prior = F, selection = "mu_implied")
devtools::load_all()
devtools::load_all()
debug(get_mu_implied)
gd_summary(emc, plot_prior = F, selection = "mu_implied")
devtools::load_all()
gd_summary(emc, plot_prior = F, selection = "mu_implied")
debug(get_mu_implied)
gd_summary(emc, plot_prior = F, selection = "mu_implied")
B
as.matrix(B[,,i])
devtools::load_all()
debug(get_mu_implied)
gd_summary(emc, plot_prior = F, selection = "mu_implied")
c(t(mu[,i]) + as.matrix(loadings[,,i]) %*% B_0_inv %*% as.matrix(G[,,i]) %*% x_mu
+ as.matrix(K[,,i]) %*% x_mu)
as.matrix(loadings[,,i])
B_0_inv
as.matrix(loadings[,,i]) %*% B_0_inv
as.matrix(G[,,i])
as.matrix(loadings[,,i]) %*% B_0_inv %*% as.matrix(G[,,i])
as.matrix(loadings[,,i]) %*% B_0_inv %*% as.matrix(G[,,i]) %*% x_mu
as.matrix(K[,,i]) %*% x_mu
as.matrix(loadings[,,i]) %*% B_0_inv %*% as.matrix(G[,,i]) %*% x_mu
+ as.matrix(K[,,i]) %*% x_mu
t(mu[,i])
mu[,i]
as.matrix(mu[,i])
c(as.matrix(mu[,i]) + as.matrix(loadings[,,i]) %*% B_0_inv %*% as.matrix(G[,,i]) %*% x_mu
+ as.matrix(K[,,i]) %*% x_mu)
as.matrix(mu[,i]) + as.matrix(loadings[,,i]) %*% B_0_inv %*% as.matrix(G[,,i]) %*% x_mu
+ as.matrix(K[,,i]) %*% x_mu
mu[,i]
as.matrix(mu[,i]) + as.matrix(loadings[,,i]) %*% B_0_inv %*% as.matrix(G[,,i]) %*% x_mu
+ as.matrix(K[,,i]) %*% x_mu
as.matrix(mu[,i])
as.matrix(loadings[,,i]) %*% B_0_inv %*% as.matrix(G[,,i]) %*% x_mu
+ as.matrix(K[,,i]) %*% x_mu
devtools::load_all()
gd_summary(emc, plot_prior = F, selection = "mu_implied")
plot_pars(emc, plot_prior = F, selection = "mu_implied")
devtools::load_all()
plot_pars(emc, plot_prior = F, selection = "mu_implied")
plot(emc selection = "mu_implied")
plot(emc, selection = "mu_implied")
plot(emc, selection = "mu_implied")
plot(emc, selection = "mu")
posterior_summary(emc, selection = "mu_implied")
posterior_summary(emc, selection = "mu")
posterior_summary(emc, selection = "mu")
posterior_summary(emc, selection = "mu")
posterior_summary(emc, selection = "mu_implied")
posterior_summary(emc, selection = "regressors")
posterior_summary(emc, selection = "factor_regressors")
posterior_summary(emc, selection = "structural_regressors")
attr(emc[[1]], "variant_funs") <- get_variant_funs
devtools::load_all()
attr(emc[[1]], "variant_funs") <- get_variant_funs("SEM")
attr(emc[[2]], "variant_funs") <- get_variant_funs("SEM")
attr(emc[[3]], "variant_funs") <- get_variant_funs("SEM")
compare(list(emc), BayesFactor = F)
debug(IC)
compare(list(emc), BayesFactor = F)
a
attr(emc[[1]], "variant_funs")$group_IC
group_stats
mean_lls
mean_lls
withG <- emc
load("/home/niek/Downloads/SEM_LNR_with_K_large.RData")
load("/home/niek/Downloads/SEM_LNR_with_K_large.RData")
load("/home/niek/Downloads/SEM_LNR_with_K_large.RData")
load("/home/niek/Downloads/SEM_LNR_with_K_large.RData")
.rs.restartR()
load("/home/niek/Downloads/SEM_LNR_with_K_large.RData")
load("/home/niek/Downloads/SEM_LNR_with_K_large.RData")
emc <- subset(emc, length.out = 1000)
attr(emc[[1]], "variant_funs") <- get_variant_funs("SEM")
devtools::load_all()
print(emc)
attr(emc[[1]], "variant_funs") <- get_variant_funs("SEM")
attr(emc[[2]], "variant_funs") <- get_variant_funs("SEM")
attr(emc[[3]], "variant_funs") <- get_variant_funs("SEM")
withK <- emc
chain_n(withG)
chain_n(withK)
compare(list(G = withG, K = withK), BayesFactor = F)
compare(list(G = withG), BayesFactor = F)
.rs.restartR()
devtools::load_all()
compare(list(G = withG), BayesFactor = F)
debug(group_IC_SEM)
compare(list(G = withG), BayesFactor = F)
debug(IC)
compare(list(G = withG), BayesFactor = F)
debug(attr(emc[[1]], "variant_funs")$group_IC)
attr(emc[[1]], "variant_funs")$group_IC(emc, stage=stage,filter=filter)
attr(emc, "variant_funs")$type
attr(emc[[1]], "variant_funs")
attr(emc[[1]], "variant_funs")$type
get_pars(emc, selection = "alpha", stage = stage, filter = filter,
return_mcmc = FALSE, merge_chains = TRUE)
debug(get_objects)
get_pars(emc, selection = "alpha", stage = stage, filter = filter,
return_mcmc = FALSE, merge_chains = TRUE)
type
devtools::load_all()
load("/home/niek/Downloads/SEM_LNR_with_K_large.RData")
16/40
1/10
plot(emc, selection = "factor_regressors")
plot(emc, selection = "regressors")
debug(plot.emc)
plot(emc, selection = "factor_regressors")
debug(plot_mcmc_list)
length(MCMC_samples[[1]])
MCMC_samples
debug(get_pars)
plot(emc, selection = "factor_regressors")
samples
load("~/Downloads/SEM_LNR_with_G_large.RData")
emc <- subset(emc, length.out = 1000)
attr(emc[[1]], "variant_funs") <- get_variant_funs("SEM")
attr(emc[[2]], "variant_funs") <- get_variant_funs("SEM")
attr(emc[[3]], "variant_funs") <- get_variant_funs("SEM")
devtools::load_all()
plot(emc, selection = "factor_regressors")
debug(plot_mcmc_list)
plot(emc, selection = "factor_regressors")
debug(plot_mcmc_list)
plot(emc, selection = "factor_regressors")
length(MCMC_samples)
names(MCMC_samples)[i]
paste0(selection, ": ", names(MCMC_samples)[i])
ifelse(length(MCMC_samples) == 1, names(MCMC_samples)[i], paste0(selection, ": ", names(MCMC_samples)[i]))
x_name <- NULL
cur_dots <- add_defaults(cur_dots, xlab = x_name)
cur_dots
do.call(fun, c(list(MCMC_samples[[i]]), fix_dots_plot(cur_dots),
fix_dots(cur_dots, get(fun), consider_dots = F, exclude =
c(names(par()), names(formals(arrows)), names(formals(plot.default))))))
emc[[1]]$samples$G |> dimnames()
devtools::load_all()
devtools::load_all()
compare(list(G = emc), BayesFactor = F, group_only = F)
devtools::load_all()
compare(list(G = emc), BayesFactor = F, group_only = F)
undebug(get_pars)
.rs.restartR()
devtools::load_all()
compare(list(G = emc), BayesFactor = F, group_only = T)
load("~/Downloads/SEM_LNR_with_K_large.RData")
devtools::load_all()
compare(list(G = emc), BayesFactor = F, group_only = T)
get_objects
devtools::load_all()
debug(get_objects)
compare(list(G = emc), BayesFactor = F, group_only = T)
type
type
