devtools::install()
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=MTlbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
model
model=MTlbaB
model
model[[1]]
depare(model)
deparse(model)
?function
?'function'
body(model)
names(body(model))
body(model)[[1]]
body(model)[1]
body(model)[2]
body(model)[2][1]
class(body(model))
tmp <- deparse(model)
class(tmp)
tmp
tmp[3]
parse(tmp)
?deparse
substitute(model)
?body
EMC2:::map_p
devtools::install()
devtools::document()
devtools::install()
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=MTlbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=MT3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
MT3lbaB
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=BE3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
designTCLBA <- make_design(model=TC3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(B~1,v~lM,A~1,sv~1,t0~1,DT1~1,DT2~1),constants=c(sv=0))
p_vector[1:7] <- c(v=1,v_lMTRUE=1,A=log(.5),DT1=qnorm(1/3),DT2=qnorm(2/3),B=1.5,t0=log(.3))
p_vector <- c(v=1,v_lMTRUE=1,A=log(.5),DT1=qnorm(1/3),DT2=qnorm(2/3),B=1.5,t0=log(.3))
# model=NULL;trials=NULL;data=NULL;expand=1;
# mapped_p=FALSE;LT=NULL;UT=NULL;LC=NULL;UC=NULL;
# Fcovariates=NULL;return_Ffunctions=FALSE
design=designMTLBA;trials=2
if (is.null(model)) if (is.null(design$model))
stop("Must specify model as not in design") else model <- design$model
Ffactors=c(design$Ffactors,list(trials=1:trials))
data <- as.data.frame.table(array(dim=unlist(lapply(Ffactors,length)),
dimnames=Ffactors))
for (i in names(design$Ffactors))
data[[i]] <- factor(data[[i]],levels=design$Ffactors[[i]])
names(data)[dim(data)[2]] <- "R"
data$R <- factor(data$R,levels=design$Rlevels)
data$trials <- as.numeric(as.character(data$trials))
LT <- UT <- LC <- UC <- Rmissing <- NULL
if (!is.factor(data$subjects)) data$subjects <- factor(data$subjects)
if (!is.null(model)) {
if (!is.function(model)) stop("model arguement must  be a function")
if ( is.null(model()$p_types) ) stop("model()$p_types must be specified")
if ( is.null(model()$transform) ) stop("model()$transform must be specified")
if ( is.null(model()$Ntransform) ) stop("model()$Ntransform must be specified")
if ( is.null(model()$Ttransform) ) stop("model()$Ttransform must be specified")
}
# model=NULL;trials=NULL;data=NULL;expand=1;
# mapped_p=FALSE;LT=NULL;UT=NULL;LC=NULL;UC=NULL;
# Fcovariates=NULL;return_Ffunctions=FALSE
design=designMTLBA;trials=2; model="BE3lbaB"
if (!is.null(model)) {
if (!is.function(model)) stop("model arguement must  be a function")
if ( is.null(model()$p_types) ) stop("model()$p_types must be specified")
if ( is.null(model()$transform) ) stop("model()$transform must be specified")
if ( is.null(model()$Ntransform) ) stop("model()$Ntransform must be specified")
if ( is.null(model()$Ttransform) ) stop("model()$Ttransform must be specified")
}
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=BE3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
designTCLBA <- make_design(model=TC3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(B~1,v~lM,A~1,sv~1,t0~1,DT1~1,DT2~1),constants=c(sv=0))
p_vector <- c(v=1,v_lMTRUE=1,A=log(.5),DT1=qnorm(1/3),DT2=qnorm(2/3),B=1.5,t0=log(.3))
# p_vector <- sampled_p_vector(designMTLBA)
# model=NULL;trials=NULL;data=NULL;expand=1;
# mapped_p=FALSE;LT=NULL;UT=NULL;LC=NULL;UC=NULL;
# Fcovariates=NULL;return_Ffunctions=FALSE
design=designMTLBA;trials=2; model=BE3lbaB
if (is.null(model)) if (is.null(design$model))
stop("Must specify model as not in design") else model <- design$model
Ffactors=c(design$Ffactors,list(trials=1:trials))
data <- as.data.frame.table(array(dim=unlist(lapply(Ffactors,length)),
dimnames=Ffactors))
for (i in names(design$Ffactors))
data[[i]] <- factor(data[[i]],levels=design$Ffactors[[i]])
names(data)[dim(data)[2]] <- "R"
data$R <- factor(data$R,levels=design$Rlevels)
data$trials <- as.numeric(as.character(data$trials))
LT <- UT <- LC <- UC <- Rmissing <- NULL
if (!is.factor(data$subjects)) data$subjects <- factor(data$subjects)
if (!is.null(model)) {
if (!is.function(model)) stop("model arguement must  be a function")
if ( is.null(model()$p_types) ) stop("model()$p_types must be specified")
if ( is.null(model()$transform) ) stop("model()$transform must be specified")
if ( is.null(model()$Ntransform) ) stop("model()$Ntransform must be specified")
if ( is.null(model()$Ttransform) ) stop("model()$Ttransform must be specified")
}
data <- design_model(
EMC2:::add_accumulators(data,design$matchfun,simulate=TRUE,type=model()$type,Fcovariates=design$Fcovariates),
design,model,add_acc=FALSE,compress=FALSE,verbose=FALSE,
rt_check=FALSE)
dadm=data
p=model()$transform(add_constants(p_vector,design$constants))
pars <- EMC2:::map_p(p,data)
pars
p
x=pars
substr(dimnames(x)[[2]],1,2)
substr(dimnames(x)[[2]],1,2)=="DT"]
substr(dimnames(x)[[2]],1,2)=="DT"
devtools::install()
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=BE3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
designTCLBA <- make_design(model=TC3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(B~1,v~lM,A~1,sv~1,t0~1,DT1~1,DT2~1),constants=c(sv=0))
p_vector <- c(v=1,v_lMTRUE=1,A=log(.5),DT1=qnorm(1/3),DT2=qnorm(2/3),B=1.5,t0=log(.3))
# p_vector <- sampled_p_vector(designMTLBA)
# model=NULL;trials=NULL;data=NULL;expand=1;
# mapped_p=FALSE;LT=NULL;UT=NULL;LC=NULL;UC=NULL;
# Fcovariates=NULL;return_Ffunctions=FALSE
design=designMTLBA;trials=2; model=BE3lbaB
if (is.null(model)) if (is.null(design$model))
stop("Must specify model as not in design") else model <- design$model
Ffactors=c(design$Ffactors,list(trials=1:trials))
data <- as.data.frame.table(array(dim=unlist(lapply(Ffactors,length)),
dimnames=Ffactors))
for (i in names(design$Ffactors))
data[[i]] <- factor(data[[i]],levels=design$Ffactors[[i]])
names(data)[dim(data)[2]] <- "R"
data$R <- factor(data$R,levels=design$Rlevels)
data$trials <- as.numeric(as.character(data$trials))
LT <- UT <- LC <- UC <- Rmissing <- NULL
if (!is.factor(data$subjects)) data$subjects <- factor(data$subjects)
if (!is.null(model)) {
if (!is.function(model)) stop("model arguement must  be a function")
if ( is.null(model()$p_types) ) stop("model()$p_types must be specified")
if ( is.null(model()$transform) ) stop("model()$transform must be specified")
if ( is.null(model()$Ntransform) ) stop("model()$Ntransform must be specified")
if ( is.null(model()$Ttransform) ) stop("model()$Ttransform must be specified")
}
data <- design_model(
EMC2:::add_accumulators(data,design$matchfun,simulate=TRUE,type=model()$type,Fcovariates=design$Fcovariates),
design,model,add_acc=FALSE,compress=FALSE,verbose=FALSE,
rt_check=FALSE)
dadm=data
p=model()$transform(add_constants(p_vector,design$constants))
pars <- EMC2:::map_p(p,data)
pars
pars <- model()$Ntransform(EMC2:::map_p(p,data))
pars
devtools::install()
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=BE3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
designTCLBA <- make_design(model=TC3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(B~1,v~lM,A~1,sv~1,t0~1,DT1~1,DT2~1),constants=c(sv=0))
p_vector <- c(v=1,v_lMTRUE=1,A=log(.5),DT1=qnorm(1/3),DT2=qnorm(2/3),B=1.5,t0=log(.3))
# p_vector <- sampled_p_vector(designMTLBA)
# model=NULL;trials=NULL;data=NULL;expand=1;
# mapped_p=FALSE;LT=NULL;UT=NULL;LC=NULL;UC=NULL;
# Fcovariates=NULL;return_Ffunctions=FALSE
design=designMTLBA;trials=2; model=BE3lbaB
if (is.null(model)) if (is.null(design$model))
stop("Must specify model as not in design") else model <- design$model
Ffactors=c(design$Ffactors,list(trials=1:trials))
data <- as.data.frame.table(array(dim=unlist(lapply(Ffactors,length)),
dimnames=Ffactors))
for (i in names(design$Ffactors))
data[[i]] <- factor(data[[i]],levels=design$Ffactors[[i]])
names(data)[dim(data)[2]] <- "R"
data$R <- factor(data$R,levels=design$Rlevels)
data$trials <- as.numeric(as.character(data$trials))
LT <- UT <- LC <- UC <- Rmissing <- NULL
if (!is.factor(data$subjects)) data$subjects <- factor(data$subjects)
if (!is.null(model)) {
if (!is.function(model)) stop("model arguement must  be a function")
if ( is.null(model()$p_types) ) stop("model()$p_types must be specified")
if ( is.null(model()$transform) ) stop("model()$transform must be specified")
if ( is.null(model()$Ntransform) ) stop("model()$Ntransform must be specified")
if ( is.null(model()$Ttransform) ) stop("model()$Ttransform must be specified")
}
data <- design_model(
EMC2:::add_accumulators(data,design$matchfun,simulate=TRUE,type=model()$type,Fcovariates=design$Fcovariates),
design,model,add_acc=FALSE,compress=FALSE,verbose=FALSE,
rt_check=FALSE)
dadm=data
p=model()$transform(add_constants(p_vector,design$constants))
pars <- model()$Ntransform(EMC2:::map_p(p,data))
pars
dadm=data
names(dadm)
names(attributes(dadm))
names(attributes(dadm)$designs)
names(attributes(attributes(dadm)$designs))
attributes(dadm)$designs
names(attributes(dadm))
class(dadm)
devtools::install()
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=BE3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
designTCLBA <- make_design(model=TC3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(B~1,v~lM,A~1,sv~1,t0~1,DT1~1,DT2~1),constants=c(sv=0))
p_vector <- c(v=1,v_lMTRUE=1,A=log(.5),DT1=qnorm(1/3),DT2=qnorm(2/3),B=log(1.5),t0=log(.3))
# p_vector <- sampled_p_vector(designMTLBA)
# model=NULL;trials=NULL;data=NULL;expand=1;
# mapped_p=FALSE;LT=NULL;UT=NULL;LC=NULL;UC=NULL;
# Fcovariates=NULL;return_Ffunctions=FALSE
design=designMTLBA;trials=2; model=BE3lbaB
if (is.null(model)) if (is.null(design$model))
stop("Must specify model as not in design") else model <- design$model
Ffactors=c(design$Ffactors,list(trials=1:trials))
data <- as.data.frame.table(array(dim=unlist(lapply(Ffactors,length)),
dimnames=Ffactors))
for (i in names(design$Ffactors))
data[[i]] <- factor(data[[i]],levels=design$Ffactors[[i]])
names(data)[dim(data)[2]] <- "R"
data$R <- factor(data$R,levels=design$Rlevels)
data$trials <- as.numeric(as.character(data$trials))
LT <- UT <- LC <- UC <- Rmissing <- NULL
if (!is.factor(data$subjects)) data$subjects <- factor(data$subjects)
if (!is.null(model)) {
if (!is.function(model)) stop("model arguement must  be a function")
if ( is.null(model()$p_types) ) stop("model()$p_types must be specified")
if ( is.null(model()$transform) ) stop("model()$transform must be specified")
if ( is.null(model()$Ntransform) ) stop("model()$Ntransform must be specified")
if ( is.null(model()$Ttransform) ) stop("model()$Ttransform must be specified")
}
data <- design_model(
EMC2:::add_accumulators(data,design$matchfun,simulate=TRUE,type=model()$type,Fcovariates=design$Fcovariates),
design,model,add_acc=FALSE,compress=FALSE,verbose=FALSE,
rt_check=FALSE)
dadm=data
p=model()$transform(add_constants(p_vector,design$constants))
pars <- model()$Ntransform(EMC2:::map_p(p,data))
pars
attr(dadm,"dL")
attr(dadm,"dL")
pars <- cbind(pars,b=pars[,"B"] + pars[,"A"])
isDT <- substr(dimnames(pars)[[2]],1,2)=="DT"
pars[,isDT] <- pars[,isDT]*pars[,"b"]
pars
dadm
devtools::install()
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=BE3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,r~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
designTCLBA <- make_design(model=TC3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,r~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
2*qnorm(0)-1
pnorm(1/3)
pnorm(2/3)
pnorm(0)
qnorm(0)
qnorm(1)
qnorm(0+0.5)
qnorm(-1+0.5)
qnorm(2*-1 - 1)
qnorm(2*-1 + 1)
devtools::install()
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=BE3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,r~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
designTCLBA <- make_design(model=TC3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,r~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
p_vector <- c(v=1,v_lMTRUE=1,r=qnorm((1+0)/2),A=log(.5),DT1=qnorm(1/3),DT2=qnorm(2/3),B=log(1.5),t0=log(.3))
# p_vector <- sampled_p_vector(designMTLBA)
# model=NULL;trials=NULL;data=NULL;expand=1;
# mapped_p=FALSE;LT=NULL;UT=NULL;LC=NULL;UC=NULL;
# Fcovariates=NULL;return_Ffunctions=FALSE
design=designMTLBA;trials=2; model=BE3lbaB
if (is.null(model)) if (is.null(design$model))
stop("Must specify model as not in design") else model <- design$model
Ffactors=c(design$Ffactors,list(trials=1:trials))
data <- as.data.frame.table(array(dim=unlist(lapply(Ffactors,length)),
dimnames=Ffactors))
for (i in names(design$Ffactors))
data[[i]] <- factor(data[[i]],levels=design$Ffactors[[i]])
names(data)[dim(data)[2]] <- "R"
data$R <- factor(data$R,levels=design$Rlevels)
data$trials <- as.numeric(as.character(data$trials))
LT <- UT <- LC <- UC <- Rmissing <- NULL
if (!is.factor(data$subjects)) data$subjects <- factor(data$subjects)
if (!is.null(model)) {
if (!is.function(model)) stop("model arguement must  be a function")
if ( is.null(model()$p_types) ) stop("model()$p_types must be specified")
if ( is.null(model()$transform) ) stop("model()$transform must be specified")
if ( is.null(model()$Ntransform) ) stop("model()$Ntransform must be specified")
if ( is.null(model()$Ttransform) ) stop("model()$Ttransform must be specified")
}
data <- design_model(
EMC2:::add_accumulators(data,design$matchfun,simulate=TRUE,type=model()$type,Fcovariates=design$Fcovariates),
design,model,add_acc=FALSE,compress=FALSE,verbose=FALSE,
rt_check=FALSE)
dadm=data
p=model()$transform(add_constants(p_vector,design$constants))
pars <- model()$Ntransform(EMC2:::map_p(p,data))
pars
attr(dadm,"dL")
attr(dadm,"dL")
pars
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=BE3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,r~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
designTCLBA <- make_design(model=TC3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,r~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
p_vector <- c(v=1,v_lMTRUE=1,r=qnorm((1+0)/2),A=log(.5),DT1=qnorm(1/3),DT2=qnorm(2/3),B=log(1.5),t0=log(.3))
# p_vector <- sampled_p_vector(designMTLBA)
# model=NULL;trials=NULL;data=NULL;expand=1;
# mapped_p=FALSE;LT=NULL;UT=NULL;LC=NULL;UC=NULL;
# Fcovariates=NULL;return_Ffunctions=FALSE
design=designMTLBA;trials=3; model=BE3lbaB
if (is.null(model)) if (is.null(design$model))
stop("Must specify model as not in design") else model <- design$model
Ffactors=c(design$Ffactors,list(trials=1:trials))
data <- as.data.frame.table(array(dim=unlist(lapply(Ffactors,length)),
dimnames=Ffactors))
for (i in names(design$Ffactors))
data[[i]] <- factor(data[[i]],levels=design$Ffactors[[i]])
names(data)[dim(data)[2]] <- "R"
data$R <- factor(data$R,levels=design$Rlevels)
data$trials <- as.numeric(as.character(data$trials))
LT <- UT <- LC <- UC <- Rmissing <- NULL
if (!is.factor(data$subjects)) data$subjects <- factor(data$subjects)
if (!is.null(model)) {
if (!is.function(model)) stop("model arguement must  be a function")
if ( is.null(model()$p_types) ) stop("model()$p_types must be specified")
if ( is.null(model()$transform) ) stop("model()$transform must be specified")
if ( is.null(model()$Ntransform) ) stop("model()$Ntransform must be specified")
if ( is.null(model()$Ttransform) ) stop("model()$Ttransform must be specified")
}
data <- design_model(
EMC2:::add_accumulators(data,design$matchfun,simulate=TRUE,type=model()$type,Fcovariates=design$Fcovariates),
design,model,add_acc=FALSE,compress=FALSE,verbose=FALSE,
rt_check=FALSE)
dadm=data
p=model()$transform(add_constants(p_vector,design$constants))
pars <- model()$Ntransform(EMC2:::map_p(p,data))
pars
data
data$R <- rep(1:6,each=2)
data
dadm <- data
dadm$R <- rep(1:6,each=2)
dadm
attr(dadm,"dL")
pars
pars[1,0]
tmp=matix(nrow=2,ncol=2)
tmp=matrix(nrow=2,ncol=2)
tmp[1,1] <- pars[1,0]
cbind(DT0=rep(0,dim(pars)[1],pars[,c("DT1","DT2","b")]
attr(pars,"ok") <- (pars[,"t0"] > .05) & ((pars[,"A"] > 1e-6) | pars[,"A"] == 0)
cbind(DT0=rep(0,dim(pars)[1]),pars[,c("DT1","DT2","b")])
pars[,c("DT1","DT2","b")]
rm(list=ls())
library(EMC2)
designMTLBA <- make_design(model=BE3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,r~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
designTCLBA <- make_design(model=TC3lbaB,
Ffactors=list(subjects=1,S=1:2),
Rlevels=1:6,matchfun=function(d)d$S==d$lR,
Flist=list(v~lM,sv~1,r~1,A~1,DT1~1,DT2~1,B~1,t0~1),constants=c(sv=0))
p_vector <- c(v=1,v_lMTRUE=1,r=qnorm((1+0)/2),A=log(.5),DT1=qnorm(1/3),DT2=qnorm(2/3),B=log(1.5),t0=log(.3))
# p_vector <- sampled_p_vector(designMTLBA)
# model=NULL;trials=NULL;data=NULL;expand=1;
# mapped_p=FALSE;LT=NULL;UT=NULL;LC=NULL;UC=NULL;
# Fcovariates=NULL;return_Ffunctions=FALSE
design=designMTLBA;trials=3; model=BE3lbaB
if (is.null(model)) if (is.null(design$model))
stop("Must specify model as not in design") else model <- design$model
Ffactors=c(design$Ffactors,list(trials=1:trials))
data <- as.data.frame.table(array(dim=unlist(lapply(Ffactors,length)),
dimnames=Ffactors))
for (i in names(design$Ffactors))
data[[i]] <- factor(data[[i]],levels=design$Ffactors[[i]])
names(data)[dim(data)[2]] <- "R"
data$R <- factor(data$R,levels=design$Rlevels)
data$trials <- as.numeric(as.character(data$trials))
LT <- UT <- LC <- UC <- Rmissing <- NULL
if (!is.factor(data$subjects)) data$subjects <- factor(data$subjects)
if (!is.null(model)) {
if (!is.function(model)) stop("model arguement must  be a function")
if ( is.null(model()$p_types) ) stop("model()$p_types must be specified")
if ( is.null(model()$transform) ) stop("model()$transform must be specified")
if ( is.null(model()$Ntransform) ) stop("model()$Ntransform must be specified")
if ( is.null(model()$Ttransform) ) stop("model()$Ttransform must be specified")
}
data <- design_model(
EMC2:::add_accumulators(data,design$matchfun,simulate=TRUE,type=model()$type,Fcovariates=design$Fcovariates),
design,model,add_acc=FALSE,compress=FALSE,verbose=FALSE,
rt_check=FALSE)
dadm=data
p=model()$transform(add_constants(p_vector,design$constants))
pars <- model()$Ntransform(EMC2:::map_p(p,data))
dadm <- data
dadm$R <- rep(1:6,each=2)
pars[,c("DT1","DT2","b")]
pars
pars <- cbind(pars,b=pars[,"B"] + pars[,"A"])
isDT <- substr(dimnames(pars)[[2]],1,2)=="DT"
pars[,isDT] <- pars[,isDT]*pars[,"b"]
pars[,c("DT1","DT2","b")]
cbind(DT0=rep(0,dim(pars)[1]),pars[,c("DT1","DT2","b")])
attr(dadm,"dL")
pars
pars
?rtmvnorm
library(tmvtnorm)
rLBA_MTR <- function(pars,return_activation = FALSE)
# Rating from 1=high confidence left to length(d1)+length(d2)+2 for
# high confidence right, assumes posdrift=TRUE.
# pars is a matrix with columns A, b, t0, v, sv and r sorted so parameters for
# each trial are in contiguous rows. Returns nrow(pars)/2 trials
# d1 and d2 are matrices of lower thresholds for first and second accumulator
# with one row per trial.
{
getq <- function(pmat)
# sample from mvtnorm
{
sv2 <- pmat[,"sv"]^2
sigma <- matrix(c(sv2[1], rep(prod(sv) * pmat[1,"r"], 2), sv2[2]),2, 2, byrow = TRUE)
rtmvnorm(n = 1, mean = pmat[,"v"], sigma = sigma, lower = rep(0, 2))
}
get_rate <- function(x){.bincode(x[1],x[-1])}
pmats <- array(pars,dim=c(2,nrow(pars)/2,ncol(pars)),
dimnames=list(NULL,NULL,colnames(pars)))
n <- dim(pmats)[2] # number of trials
q <- apply(pmats,2,getq)
rts <- t((pmats[,,"b"]-pmats[,,"A"]) / q)
rts <- rts + t0
response <- apply(rts, 1, which.min)
rt <- rts[cbind(seq_len(n), response)]
# rating
looser2 <- response==1
lmat <- cbind(seq_len(n), 1 + as.numeric(looser2))
ylooser <- x[lmat] + q[lmat]*(rt-t0[1])
rating <- numeric(length(response))
# 2=nacc x n x #DT
d <- pmats[,,substr(dimnames(pmats)[[3]],1,2)=="DT"]
nr <- dim(d)[3]+1 # number of ratings = DT1, DT2 ..., b
if (any(looser2))
rating[looser2] <- apply(cbind(ylooser[looser2],rep(0,n),d[2,,],rep(b[2],n)),1,get_rate)
if (any(!looser2))
rating[!looser2] <- (2*nr+1)-apply(cbind(ylooser[!looser2],rep(0,n),d[1,,],rep(b[1],n)),1,get_rate)
out <- cbind(rt = rt,response = response,rating = rating)
if (return_activation) cbind(out,y = t(pmats[,,"A"]) + t(q) * (rt - t0)) else out
}
