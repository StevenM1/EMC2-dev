stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods")
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
library(ggplot2)
ggplot(data, aes(y = h.index, x = years, color = IMCN, group = IMCN)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods")
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
library(ggplot2)
ggplot(data, aes(y = h.index, x = years, color = IMCN)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods")
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
library(ggplot2)
ggplot(data, aes(y = h.index, x = years)) +
geom_point() +
geom_text +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
theme_bw()
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods")
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
library(ggplot2)
ggplot(data, aes(y = h.index, x = years)) +
geom_point() +
geom_text() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
theme_bw()
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods")
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
library(ggplot2)
ggplot(data, aes(y = h.index, x = years, label = name)) +
geom_point() +
geom_text() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
theme_bw()
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods")
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
data$name <- as.factor(data$name)
library(ggplot2)
ggplot(data, aes(y = h.index, x = years, label = name)) +
geom_point() +
geom_text() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
theme_bw()
data
?read_ods
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods", col_names = F)
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
data$name <- as.factor(data$name)
library(ggplot2)
ggplot(data, aes(y = h.index, x = years, label = name)) +
geom_point() +
geom_text() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
theme_bw()
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods", col_names = F)
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
data$name <- as.factor(data$name)
library(ggplot2)
ggplot(data, aes(y = h.index, x = years, label = name)) +
geom_point() +
geom_text(hjust = -.5) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
theme_bw()
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods", col_names = F)
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
data$name <- as.factor(data$name)
library(ggplot2)
ggplot(data, aes(y = h.index, x = years, label = name)) +
geom_point() +
geom_text(vjust = -.5) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
theme_bw()
data2 <- data[data$prof == 0,]
ggplot(data2, aes(y = h.index, x = years, label = name)) +
geom_point() +
geom_text(vjust = -.5) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
theme_bw()
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods", col_names = F)
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
data$name <- as.factor(data$name)
data2 <- data[data$prof == 0,]
library(ggplot2)
ggplot(data2, aes(y = h.index, x = years, label = name)) +
geom_point() +
geom_text(vjust = -.5) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
theme_bw()
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods", col_names = F)
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
data$name <- as.factor(data$name)
data2 <- data[data$prof == 0,]
library(ggplot2)
ggplot(data2, aes(y = h.index, x = years, label = name)) +
geom_point() +
geom_text(vjust = -.5) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
theme_bw()
load("/home/niek/Documents/UVA/2022/OnlineBackUp/data_risk.RData")
#LEARNING RATE ANALYSIS
rm(list = ls())
library(lme4)
library(lmerTest)
library(tidyverse)
library(ggpubr)
library(emmeans)
library(rstatix)
library(dplyr)
library(ggplot)
#LEARNING RATE ANALYSIS
rm(list = ls())
library(lme4)
library(lmerTest)
library(tidyverse)
library(ggpubr)
library(emmeans)
library(rstatix)
library(dplyr)
library(ggplot2)
library(ggiraphExtra)
#LEARNING RATE ANALYSIS
rm(list = ls())
library(lme4)
library(lmerTest)
library(tidyverse)
library(ggpubr)
library(emmeans)
library(rstatix)
library(dplyr)
library(ggplot2)
head(as.data.frame(data))
load("/home/niek/Documents/UVA/2022/OnlineBackUp/data_risk.RData")
add_stim_chosen_side <- function(data){
all_data <- data.frame()
for(sub in unique(data$subjectNumber)){
x <- data[data$subjectNumber == sub,]
stim_chosen_lag <- dplyr::lag(x$stim_chosen)
stim_chosen_lag[is.na(stim_chosen_lag)] <- "ignore"
x$stim_left_chosen_count <- sapply(1:nrow(x), function(i) sum(x$stim_left[i] == stim_chosen_lag[1:i]))
x$stim_right_chosen_count <- sapply(1:nrow(x), function(i) sum(x$stim_right[i] == stim_chosen_lag[1:i]))
all_data <- rbind(all_data, x)
}
return(all_data)
}
# how many times stimulus was chosen for each trial (left and right)
data <- add_stim_chosen_side(data)
data$chosen_diff <- NA
data$chosen_diff[which(data$response == "right")] <- data$stim_right_chosen_count[which(data$response == "right")] - data$stim_left_chosen_count[which(data$response == "right")]
data$chosen_diff[which(data$response == "left")] <- data$stim_left_chosen_count[which(data$response == "left")] - data$stim_right_chosen_count[which(data$response == "left")]
# Check how many sessions each subject completed
summ <- aggregate(correct ~ subjectNumber*task, data = data, FUN = mean)
sessions_per_sub <- table(summ$subjectNumber)
# See which subjects completed all sessions.
subs_completed <- names(which(sessions_per_sub > 1))
# Idx the rows of my summ data, so that only the subjects that completed all are included
data <- data[data$subjectNumber %in% subs_completed,]
# Filter out the people that did not have f/M as gender
data <- data[data$gender %in% c("f", "M"),]
# outliers
outliers <- summ %>% group_by(task) %>% identify_outliers(correct)
# Remove outliers
data <- data[!data$subjectNumber %in% outliers$subjectNumber,]
# Convert my grouping variables to factors
data$task <- as.factor(data$task)
data$subjectNumber <- as.factor(data$subjectNumber)
mean(data$val_right)
#high value present
data$high_value_present <- 0
data$high_value_present[data$val_right > 60] <- 1
data$high_value_present[data$val_left > 60] <- 1
#high value choice made
data$high_value_choice <- 0
#subset data
data <- data[which(data$high_value_present == 1),]
data$high_value_choice[data$response == "right"  & (data$val_right > 60)] <- 1
data$high_value_choice[data$response == "left" & (data$val_left > 60)] <- 1
#analysis
lmm_bin <- glmer(correct ~ gender*high_value_choice + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
# p-values
summary(lmm_bin)
# post hoc
pairwise_t_test(data, high_value_choice ~ gender)
# To visualize our interaction use ggeffects, the -5, 0 and 5 indicate that I want to plot it for those values
library(ggeffects)
ggpredict(lmm_bin, c("gender", "high_value_choice[-5, 0, 5]")) %>% plot()
ggpredict(lmm_bin, c("gender", "high_value_choice")) %>% plot()
data$rewarded_lag1 <- dplyr::lag(data$rewarded, 1)
data$rewarded_lag1
#analysis
lmm_bin <- glmer(correct ~ gender*data$rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
data$rewarded_lag1 <- data$rewarded_lag1 - mean(data$rewarded_lag1, na.rm = T)
lmm_bin <- glmer(correct ~ gender*rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
data$rewarded_lag1 <- dplyr::lag(data$rewarded, 1)/100
#analysis
lmm_bin <- glmer(correct ~ gender*data$rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
data$rewarded_lag1 <- data$rewarded_lag1 - mean(data$rewarded_lag1, na.rm = T)
lmm_bin <- glmer(correct ~ gender*rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
# p-values
summary(lmm_bin)
# post hoc
pairwise_t_test(data, high_value_choice ~ gender)
# To visualize our interaction use ggeffects, the -5, 0 and 5 indicate that I want to plot it for those values
library(ggeffects)
ggpredict(lmm_bin, c("gender", "high_value_choice")) %>% plot()
ggpredict(lmm_bin, c("gender", "rewarded_lag1")) %>% plot()
data$rewarded_lag1
data$rewarded_lag1 <- dplyr::lag(data$rewarded, 1)/100
#analysis
lmm_bin <- glmer(correct ~ gender*data$rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
# p-values
summary(lmm_bin)
# post hoc
pairwise_t_test(data, high_value_choice ~ gender)
# To visualize our interaction use ggeffects, the -5, 0 and 5 indicate that I want to plot it for those values
library(ggeffects)
ggpredict(lmm_bin, c("gender", "rewarded_lag1")) %>% plot()
#analysis
lmm_bin <- glmer(correct ~ gender*data$rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
# p-values
summary(lmm_bin)
# post hoc
pairwise_t_test(data, high_value_choice ~ gender)
# To visualize our interaction use ggeffects, the -5, 0 and 5 indicate that I want to plot it for those values
library(ggeffects)
ggpredict(lmm_bin, c("gender", "rewarded_lag1")) %>% plot()
data$rewarded_lag1
#analysis
lmm_bin <- glmer(correct ~ gender*data$rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
data$rewarded_lag1 <- data$rewarded_lag1 - mean(data$rewarded_lag1, na.rm = T)
lmm_bin <- glmer(correct ~ gender*rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
data$rewarded_lag1
#analysis
lmm_bin <- glmer(correct ~ gender*data$rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
data$rewarded_lag1 <- data$rewarded_lag1 - 50
lmm_bin <- glmer(correct ~ gender*rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
#analysis
lmm_bin <- glmer(correct ~ gender*data$rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
data$rewarded_lag1 <- data$rewarded_lag1 - 0.5
data$rewarded_lag1
data$rewarded_lag1 <- dplyr::lag(data$rewarded, 1)/100
#analysis
lmm_bin <- glmer(correct ~ gender*data$rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
data$rewarded_lag1 <- data$rewarded_lag1 - 0.5
data$rewarded_lag1
lmm_bin <- glmer(correct ~ gender*rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
# p-values
summary(lmm_bin)
# post hoc
pairwise_t_test(data, high_value_choice ~ gender)
# To visualize our interaction use ggeffects, the -5, 0 and 5 indicate that I want to plot it for those values
library(ggeffects)
ggpredict(lmm_bin, c("gender", "rewarded_lag1")) %>% plot()
for(i in unique(data$subjectNumber)){
idx <- data$subjectNumber == i
data$rewarded_lag1[idx] <- dplyr::lag(data$rewarded[idx], 1)/100
}
#analysis
lmm_bin <- glmer(correct ~ gender*data$rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
data$rewarded_lag1 <- data$rewarded_lag1 - 0.5
lmm_bin <- glmer(correct ~ gender*rewarded_lag1 + (1|subjectNumber), data = data, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
# p-values
summary(lmm_bin)
# post hoc
pairwise_t_test(data, high_value_choice ~ gender)
# To visualize our interaction use ggeffects, the -5, 0 and 5 indicate that I want to plot it for those values
library(ggeffects)
ggpredict(lmm_bin, c("gender", "rewarded_lag1")) %>% plot()
setwd("~/Downloads/")
library(readODS)
data <- readODS::read_ods("hindex.ods", col_names = F)
colnames(data) <- c("name", "h.index", "startyear", "prof")
data$years <- 2023 - data$startyear
data$IMCN <- 0
data$IMCN[1:3] <- 1
data$IMCN <- as.factor(data$IMCN)
data$name <- as.factor(data$name)
data2 <- data[data$prof == 0,]
library(ggplot2)
ggplot(data2, aes(y = h.index, x = years, label = name)) +
geom_point() +
geom_text(vjust = -.5) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
theme_bw()
rm(list = ls())
library(devtools)
# Rcpp only works as fast with install like this unfortunately, if this throws errors, restarting Rstudio worked for me
devtools::install("~/Documents/UVA/2022/EMC2")
dat <- data[,c("s","E","S","R","RT")]
library(EMC2)
# load_all()
load("test_files/PNAS.RData")
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
# Average rate = intercept, and rate d = difference (match-mismatch) contrast
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d"))
ADmat
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
debug(make_design)
design_RDM <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),matchfun=function(d)d$S==d$lR,
Clist=list(lM=ADmat,lR=ADmat,S=ADmat,E=Emat),
Flist=list(v~lM,s~1,B~E,A~1,t0~1),
constants=c(s=log(1)),
model=rdmB)
design
p_vector
undebug(make_design)
design_RDM <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),matchfun=function(d)d$S==d$lR,
Clist=list(lM=ADmat,lR=ADmat,S=ADmat,E=Emat),
Flist=list(v~lM,s~1,B~E,A~1,t0~1),
constants=c(s=log(1)),
model=rdmB)
# Test single subject
dat_single <- dat[which(dat$subjects %in% (unique(dat$subjects)[1])),]
dat_single <- droplevels(dat_single)
# first speed test:
debug(make_samplers)
samplers <- make_samplers(dat_single, design_RDM, type = "single", n_chains = 1)
dadm_list[[1]]
attr(dadm_list[[i]], "design")
attributes(dadm_list[[i]])
rm(list = ls())
library(devtools)
# Rcpp only works as fast with install like this unfortunately, if this throws errors, restarting Rstudio worked for me
# devtools::install("~/Documents/UVA/2022/EMC2")
library(EMC2)
# load_all()
load("test_files/PNAS.RData")
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
# Average rate = intercept, and rate d = difference (match-mismatch) contrast
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d"))
ADmat
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
undebug(make_design)
design_RDM <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),matchfun=function(d)d$S==d$lR,
Clist=list(lM=ADmat,lR=ADmat,S=ADmat,E=Emat),
Flist=list(v~lM,s~1,B~E,A~1,t0~1),
constants=c(s=log(1)),
model=rdmB)
# Test single subject
dat_single <- dat[which(dat$subjects %in% (unique(dat$subjects)[1])),]
dat_single <- droplevels(dat_single)
# first speed test:
samplers <- make_samplers(dat_single, design_RDM, type = "single", n_chains = 1)
# first let's run init separately
load_all()
# first speed test:
undebug(make_samplers)
samplers <- make_samplers(dat_single, design_RDM, type = "single", n_chains = 1)
# first let's run init separately
load_all()
<<<<<<< HEAD
debug(calc_ll_manager)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain =1)
c_name
attr(dadm,"designs")[[p]][attr(attr(dadm,"designs")[[p]],"expand"),,drop=FALSE]
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain =1)
useC <- T
attr(dadm,"designs")[[p]][attr(attr(dadm,"designs")[[p]],"expand"),,drop=FALSE]
rm(list = ls())
p <- 3
n <- 1000
df <- data.frame(rt = abs(rnorm(n)), group = sample(1:p, n, replace = T))
df
with(df, model.matrix(~group))
with(df, model.matrix(~group-1))
rm(list = ls())
p <- 3
n <- 1000
df <- data.frame(rt = abs(rnorm(n)), group = sample(1:p, n, replace = T))
df$group <- as.factor(df$group)
with(df, model.matrix(~group-1))
rm(list = ls())
p1 <- 2
p2 <- 3
n <- 1000
df <- data.frame(rt = abs(rnorm(n)), gender = sample(1:p, n, replace = T), age_group = sample(1:p, n, replace = T))
rm(list = ls())
p1 <- 2
p2 <- 3
n <- 1000
df <- data.frame(rt = abs(rnorm(n)), gender = sample(1:p1, n, replace = T), group = sample(1:p2, n, replace = T))
df$gender <- as.factor(df$gender)
df$group <- as.factor(df$group)
rm(list = ls())
p1 <- 2
p2 <- 3
n <- 1000
df <- data.frame(rt = abs(rnorm(n)), gender = sample(1:p1, n, replace = T), group = sample(1:p2, n, replace = T))
df$gender <- as.factor(df$gender)
df$group <- as.factor(df$group)
X <- with(df, model.matrix(~gender*group-1))
X
rm(list = ls())
p1 <- 2
p2 <- 3
n <- 1000
df <- data.frame(rt = abs(rnorm(n)), gender = sample(1:p1, n, replace = T), group = sample(1:p2, n, replace = T))
df$gender <- as.factor(df$gender)
df$group <- as.factor(df$group)
X <- with(df, model.matrix(~gender*group))
X
df$gender
df$group
=======
document()
library(devtools)
document()
document()
check()
check()
check()
library(devtools)
load_all()
load_all()
usethis::use_rcpp()
load_all()
load_all()
document()
check()
check()
check()
load_all()
check()
>>>>>>> origin
