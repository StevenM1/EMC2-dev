levels(dat$R) <- levels(dat$S)
#### LBA Models ----
# Average rate = intercept, and rate d = difference (match-mismatch) contrast,
# Note d is analogous to r in the DDM, but use of -1/2 as unlike DDM don't want
# half the difference. In this case the intercept is of interest, it is
# and index of decision urgency and stimulus magnitude effects.
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d")); ADmat
# Emphasis as before, intercept is overall caution like in DDM
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s")); Emat
# Standard assumption, only B affected by E. To fix scale sv=1
design_B <- make_design(ddata = dat, matchfun=function(d)d$S==d$lR,
Clist=list(lM=ADmat,E=Emat),
Flist=list(v~lM,sv~1,B~E,A~1,t0~1),
constants=c(sv=log(1)),
model=LBA)
priorB <- list(theta_mu_mean = c(v=2.2,v_lMd=2.5,B=log(2),'B_Ea-n'=0,'B_Ea-s'=0,A=log(1),t0=log(.2)),
theta_mu_var = diag(c(1,1,0.1,0.075,0.075,0.1,0.2)))
debug(plot_prior)
plot_prior(prior = priorB, design = design_B, mapped = T, selection = "alpha")
rm(list=ls())
devtools::load_all()
# Load and format the PNAS data.
load("test_files/PNAS.RData")
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
#### LBA Models ----
# Average rate = intercept, and rate d = difference (match-mismatch) contrast,
# Note d is analogous to r in the DDM, but use of -1/2 as unlike DDM don't want
# half the difference. In this case the intercept is of interest, it is
# and index of decision urgency and stimulus magnitude effects.
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d")); ADmat
# Emphasis as before, intercept is overall caution like in DDM
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s")); Emat
# Standard assumption, only B affected by E. To fix scale sv=1
design_B <- make_design(ddata = dat, matchfun=function(d)d$S==d$lR,
Clist=list(lM=ADmat,E=Emat),
Flist=list(v~lM,sv~1,B~E,A~1,t0~1),
constants=c(sv=log(1)),
model=LBA)
priorB <- list(theta_mu_mean = c(v=2.2,v_lMd=2.5,B=log(2),'B_Ea-n'=0,'B_Ea-s'=0,A=log(1),t0=log(.2)),
theta_mu_var = diag(c(1,1,0.1,0.075,0.075,0.1,0.2)))
debug(plot_prior)
plot_prior(prior = priorB, design = design_B, mapped = T, selection = "alpha")
matrix(pp_var[i,], n_pars, n_pars)
rm(list=ls())
devtools::load_all()
# Load and format the PNAS data.
load("test_files/PNAS.RData")
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
#### LBA Models ----
# Average rate = intercept, and rate d = difference (match-mismatch) contrast,
# Note d is analogous to r in the DDM, but use of -1/2 as unlike DDM don't want
# half the difference. In this case the intercept is of interest, it is
# and index of decision urgency and stimulus magnitude effects.
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d")); ADmat
# Emphasis as before, intercept is overall caution like in DDM
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s")); Emat
# Standard assumption, only B affected by E. To fix scale sv=1
design_B <- make_design(ddata = dat, matchfun=function(d)d$S==d$lR,
Clist=list(lM=ADmat,E=Emat),
Flist=list(v~lM,sv~1,B~E,A~1,t0~1),
constants=c(sv=log(1)),
model=LBA)
priorB <- list(theta_mu_mean = c(v=2.2,v_lMd=2.5,B=log(2),'B_Ea-n'=0,'B_Ea-s'=0,A=log(1),t0=log(.2)),
theta_mu_var = diag(c(1,1,0.1,0.075,0.075,0.1,0.2)))
debug(plot_prior)
plot_prior(prior = priorB, design = design_B, mapped = T, selection = "alpha")
matrix(pp_var[i,], n_pars, n_pars)
pp_var
length(pp_var[i,])
dim(pp_var)
rm(list=ls())
devtools::load_all()
# Load and format the PNAS data.
load("test_files/PNAS.RData")
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
#### LBA Models ----
# Average rate = intercept, and rate d = difference (match-mismatch) contrast,
# Note d is analogous to r in the DDM, but use of -1/2 as unlike DDM don't want
# half the difference. In this case the intercept is of interest, it is
# and index of decision urgency and stimulus magnitude effects.
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d")); ADmat
# Emphasis as before, intercept is overall caution like in DDM
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s")); Emat
# Standard assumption, only B affected by E. To fix scale sv=1
design_B <- make_design(ddata = dat, matchfun=function(d)d$S==d$lR,
Clist=list(lM=ADmat,E=Emat),
Flist=list(v~lM,sv~1,B~E,A~1,t0~1),
constants=c(sv=log(1)),
model=LBA)
priorB <- list(theta_mu_mean = c(v=2.2,v_lMd=2.5,B=log(2),'B_Ea-n'=0,'B_Ea-s'=0,A=log(1),t0=log(.2)),
theta_mu_var = diag(c(1,1,0.1,0.075,0.075,0.1,0.2)))
debug(plot_prior)
plot_prior(prior = priorB, design = design_B, mapped = T, selection = "alpha")
matrix(pp_var[i,], n_pars, n_pars)
samples
rm(list=ls())
devtools::load_all()
# Load and format the PNAS data.
load("test_files/PNAS.RData")
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
#### LBA Models ----
# Average rate = intercept, and rate d = difference (match-mismatch) contrast,
# Note d is analogous to r in the DDM, but use of -1/2 as unlike DDM don't want
# half the difference. In this case the intercept is of interest, it is
# and index of decision urgency and stimulus magnitude effects.
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d")); ADmat
# Emphasis as before, intercept is overall caution like in DDM
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s")); Emat
# Standard assumption, only B affected by E. To fix scale sv=1
design_B <- make_design(ddata = dat, matchfun=function(d)d$S==d$lR,
Clist=list(lM=ADmat,E=Emat),
Flist=list(v~lM,sv~1,B~E,A~1,t0~1),
constants=c(sv=log(1)),
model=LBA)
priorB <- list(theta_mu_mean = c(v=2.2,v_lMd=2.5,B=log(2),'B_Ea-n'=0,'B_Ea-s'=0,A=log(1),t0=log(.2)),
theta_mu_var = diag(c(1,1,0.1,0.075,0.075,0.1,0.2)))
debug(plot_prior)
plot_prior(prior = priorB, design = design_B, mapped = T, selection = "alpha")
rm(list=ls())
devtools::load_all()
# Load and format the PNAS data.
load("test_files/PNAS.RData")
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
#### LBA Models ----
# Average rate = intercept, and rate d = difference (match-mismatch) contrast,
# Note d is analogous to r in the DDM, but use of -1/2 as unlike DDM don't want
# half the difference. In this case the intercept is of interest, it is
# and index of decision urgency and stimulus magnitude effects.
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d")); ADmat
# Emphasis as before, intercept is overall caution like in DDM
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s")); Emat
# Standard assumption, only B affected by E. To fix scale sv=1
design_B <- make_design(ddata = dat, matchfun=function(d)d$S==d$lR,
Clist=list(lM=ADmat,E=Emat),
Flist=list(v~lM,sv~1,B~E,A~1,t0~1),
constants=c(sv=log(1)),
model=LBA)
priorB <- list(theta_mu_mean = c(v=2.2,v_lMd=2.5,B=log(2),'B_Ea-n'=0,'B_Ea-s'=0,A=log(1),t0=log(.2)),
theta_mu_var = diag(c(1,1,0.1,0.075,0.075,0.1,0.2)))
debug(plot_prior)
plot_prior(prior = priorB, design = design_B, mapped = T, selection = "alpha")
rm(list=ls())
devtools::load_all()
# Load and format the PNAS data.
load("test_files/PNAS.RData")
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
#### LBA Models ----
# Average rate = intercept, and rate d = difference (match-mismatch) contrast,
# Note d is analogous to r in the DDM, but use of -1/2 as unlike DDM don't want
# half the difference. In this case the intercept is of interest, it is
# and index of decision urgency and stimulus magnitude effects.
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d")); ADmat
# Emphasis as before, intercept is overall caution like in DDM
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s")); Emat
# Standard assumption, only B affected by E. To fix scale sv=1
design_B <- make_design(ddata = dat, matchfun=function(d)d$S==d$lR,
Clist=list(lM=ADmat,E=Emat),
Flist=list(v~lM,sv~1,B~E,A~1,t0~1),
constants=c(sv=log(1)),
model=LBA)
priorB <- list(theta_mu_mean = c(v=2.2,v_lMd=2.5,B=log(2),'B_Ea-n'=0,'B_Ea-s'=0,A=log(1),t0=log(.2)),
theta_mu_var = diag(c(1,1,0.1,0.075,0.075,0.1,0.2)))
plot_prior(prior = priorB, design = design_B, mapped = T, selection = "alpha")
rm(list=ls())
devtools::load_all()
# Load and format the PNAS data.
load("test_files/PNAS.RData")
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
#### LBA Models ----
# Average rate = intercept, and rate d = difference (match-mismatch) contrast,
# Note d is analogous to r in the DDM, but use of -1/2 as unlike DDM don't want
# half the difference. In this case the intercept is of interest, it is
# and index of decision urgency and stimulus magnitude effects.
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d")); ADmat
# Emphasis as before, intercept is overall caution like in DDM
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s")); Emat
# Standard assumption, only B affected by E. To fix scale sv=1
design_B <- make_design(ddata = dat, matchfun=function(d)d$S==d$lR,
Clist=list(lM=ADmat,E=Emat),
Flist=list(v~lM,sv~1,B~E,A~1,t0~1),
constants=c(sv=log(1)),
model=LBA)
priorB <- list(theta_mu_mean = c(v=2.2,v_lMd=2.5,B=log(2),'B_Ea-n'=0,'B_Ea-s'=0,A=log(1),t0=log(.2)),
theta_mu_var = diag(c(1,1,0.1,0.075,0.075,0.1,0.2)))
plot_prior(prior = priorB, design = design_B, mapped = F, selection = "alpha")
devtools::install()
devtools::document()
devtools::install()
library(EMC2)
rm(list=ls())
library(EMC2)
#### Data preperation ----
# Load data from Forstmann, B. U., Dutilh, G., Brown, S., Neumann, J., Cramon,
# D. Y. von, Ridderinkhof, K. R., & Wagenmakers, E.-J. (2008). Striatum and pre-SMA
# facilitate decision-making under time pressure. Proceedings of the National
# Academy of Sciences, 105(45), 17538–17542. https://doi.org/10.1073/pnas.0805903105
print(load("test_files/PNAS.RData"))
#! I made a project and copied it in to it, but I think there is a way to make
#! a dataset available as part of the package
# Format data for EMC2
# Pick out relevant columns
dat <- data[,c("s","E","S","R","RT")]
# EMC2 requires the column containing response time to be called "rt" and the
# column indicating participants to be called 'subjects". Note that all names
# are case sensitive. Importantly, EMC2 expects response time in SECONDS!
names(dat)[c(1,5)] <- c("subjects","rt")
# Response factor, use same levels as the stimulus factor (S)
levels(dat$R) <- c("left", "right")
# Instruction (emphasis) factor manipulating speed-accuracy trade-off
dat$E <- factor(dat$E, levels = c("speed", "neutral", "accuracy"))
# Look at the data
head(dat)
plot_defective_density(dat, factors = c("S", "E"), layout = c(2,3))
# Diffusion Decision Model (DDM) ----
# We first examine a range of different DDM models to illustrate how to specify
# formulas mapping parameters to design factors.
# We have two drift rates (v), one for when the stimulus (S) is moving left, one for
# when it's moving right. We first use dummy coding to directly sample each rate
# separately using the formula v~0+S, where the "0+" removes the intercept and
# given S has the the default R treatment contrast for a factor results in
# dummy coding. The first level of the S factor (left) is mapped to the bottom
# boundary and the second (right) to the top, so negative drift rates favor a
# left response and positive rates a right response.
# We make the usual "selective influence" assumption that only threshold (a,
# in the DDM often also called "response caution") varies with speed vs.
# accuracy emphasis (a~E). Because we do not remove the intercept the default
# treatment code is used, so the intercept estimates a in the speed condition
# and two effects are estimated for neutral-speed and accuracy-speed.
# For the remaining parameters we  estimates one value for all conditions.
# Because we do not specify DP (bias in non-decision time) and st0 (variability
# in non-decision time) and so they are given their default values (unbiased and
# no variability respectively).
# The constants argument follows the usual convention of fixing the standard
# deviation of diffusive variability to s=1 (estimated on a log scale hence
# log(s)) so the model is identifiable.
# We give the make_design command the model type (DDM) and the data file it will
# be used with so that information about the design:
#    Rlevels = names of the possible responses, here Rlevels=c("left","right")
#    factors = list specifying factor names and thier levels, here
#       factors = list(S=c("left","right",E=c("speed","neutral","accuracy"))
# Note that the factors should non-redundantly span the design, i.e., together
# they should uniquely specify every design cell.
# When we run make_ design the names of the parameters to be sampled (9 in this
# case) and the matrices that map then to the design are printed. To reflect
# the selective influence assumption we call this "DDM_aE":
design_DDMaE <- make_design(data = dat,model=DDM,
formula =list(v~0+S,a~E, t0~1, s~1, Z~1, sv~1, SZ~1),
constants=c(s=log(1)))
# It can sometimes be hard to understand how the parametrization you have
# specified maps to the experimental design. In this case it can be useful to
# construct a parameter vector ("p_vector") and examine the mapping to the
# experimental design on the natural scale.
# You can make an empty parameter vector as follow (doMap=FALSE removes the
# design matrices).
sampled_p_vector(design_DDMaE,doMap=FALSE)
# Or you can directly type the full p_vector
p_vector=c(v_Sleft=-2,v_Sright=2,a=log(1),a_Eneutral=log(1.5),a_Eaccuracy=log(2),
t0=log(.2),Z=qnorm(.5),sv=log(.5),SZ=qnorm(.5))
# Making the mapping we see, for example, we see that a is mapped as
# speed = exp(log(1)) = 1
# neutral = exp(log(1)+log(1.5)) = 1*1.5 = 1
# accuracy = exp(log(1)+log(2)) = 1*2 = 2
mapped_par(p_vector,design_DDMaE)
# We will now fit hierarchical model of the default "standard" type which
# estimates a full variance-covarinace matrix at the group level. To do so we
# first specify prior at the group level.
# Hierarchical models in EMC2 use a normal prior on the group means, so we must
# specify means (pmean) and standard deviations (psd) for each of the 9 model
# parameters. Note priors are specified on the unbounded scale on which sampling
# occurs, which requires a log transformation for a and t0 (as they must be
# positive) and a probit transformation for  Z and SZ, both of which are
# estimated in a proportional sense (relative to a and distance to the closest
# boundary from the start point, respectively) and so are on the unit interval.
# We use an informed prior based on:
# 1) Responding being fairly accurate so the mean for the left rate is negative
#    and for the right rate positive (the value of 2 is fairly typical for the
#    DDM.
# 2) The assumption that response caution is reduced from accuracy to neutral
#    to speed instruction.
#
# For pmean the p_vector above is reasonable. With some experimentation we use
# the following standard deviation.
psd <- c(v_Sleft=1,v_Sright=1,a=.3,a_Eneutral=.3,a_Eaccuracy=.3,
t0=.4,Z=1,sv=.4,SZ=1)
prior_DDMaE <- make_prior(design_DDMaE,pmean=p_vector,psd=psd)
# 2) combining the dadm, prior and a container for posterior MCMC chains.
# By default make_samplers makes a samplers object with three chains. It also
# assumes that response time is recorded with a resolution of 0.2 seconds (the
# typical 50Hz refresh rate of a monitor and hence in most experimental setups
# the maximum resolution for recording response times to visual stimuli). This
# specification is used to compress the dadm to speed up sampling, by keeping
# only rows with unique combinations of parameters, responses and rt values.
# During sampling log-likelihood calculations (which can be computationally
# expensive) is done only for these unique values, and the results then
# replicated appropriately and summed.
DDMaE <- make_samplers(dat, design_DDMaE, prior = prior_DDMaE)
# Next we run the sampling. This can take some time so you can instead load
# results that are stored in this project (i.e., load("DDMaE.RData")). By default
# 3 x 1000 samples will be obtained after burn in and adaptation (but possibly
# more if this is not enough to satisfy default convergence criteria). Here
# to speed things up we use parallel processing with the default one core per
# chain augmented by using 4 cores per chain (12 in total as this was done with
# a 12 core laptop, adjust as required for your system). The fileName argument
# saves intermediate progress (as an object called "samplers") to a file, which
# is prudent for longer runs in case they have to be restarted.
DDMaE <- run_emc(DDMaE, cores_per_chain = 4, fileName = 'tmp.RData', verbose = T)
remove.packages("EMC2")
.rs.restartR()
devtools::install()
library(EMC2)
rm(list=ls())
library(EMC2)
#### Data preperation ----
# Load data from Forstmann, B. U., Dutilh, G., Brown, S., Neumann, J., Cramon,
# D. Y. von, Ridderinkhof, K. R., & Wagenmakers, E.-J. (2008). Striatum and pre-SMA
# facilitate decision-making under time pressure. Proceedings of the National
# Academy of Sciences, 105(45), 17538–17542. https://doi.org/10.1073/pnas.0805903105
print(load("test_files/PNAS.RData"))
#! I made a project and copied it in to it, but I think there is a way to make
#! a dataset available as part of the package
# Format data for EMC2
# Pick out relevant columns
dat <- data[,c("s","E","S","R","RT")]
# EMC2 requires the column containing response time to be called "rt" and the
# column indicating participants to be called 'subjects". Note that all names
# are case sensitive. Importantly, EMC2 expects response time in SECONDS!
names(dat)[c(1,5)] <- c("subjects","rt")
# Response factor, use same levels as the stimulus factor (S)
levels(dat$R) <- c("left", "right")
# Instruction (emphasis) factor manipulating speed-accuracy trade-off
dat$E <- factor(dat$E, levels = c("speed", "neutral", "accuracy"))
# Look at the data
head(dat)
plot_defective_density(dat, factors = c("S", "E"), layout = c(2,3))
design_DDMaE <- make_design(data = dat,model=DDM,
formula =list(v~0+S,a~E, t0~1, s~1, Z~1, sv~1, SZ~1),
constants=c(s=log(1)))
# You can make an empty parameter vector as follow (doMap=FALSE removes the
# design matrices).
sampled_p_vector(design_DDMaE,doMap=FALSE)
# Or you can directly type the full p_vector
p_vector=c(v_Sleft=-2,v_Sright=2,a=log(1),a_Eneutral=log(1.5),a_Eaccuracy=log(2),
t0=log(.2),Z=qnorm(.5),sv=log(.5),SZ=qnorm(.5))
# boundary from the start point, respectively) and so are on the unit interval.
# We use an informed prior based on:
# 1) Responding being fairly accurate so the mean for the left rate is negative
#    and for the right rate positive (the value of 2 is fairly typical for the
#    DDM.
# 2) The assumption that response caution is reduced from accuracy to neutral
#    to speed instruction.
#
# For pmean the p_vector above is reasonable. With some experimentation we use
# the following standard deviation.
psd <- c(v_Sleft=1,v_Sright=1,a=.3,a_Eneutral=.3,a_Eaccuracy=.3,
t0=.4,Z=1,sv=.4,SZ=1)
# boundary from the start point, respectively) and so are on the unit interval.
# We use an informed prior based on:
# 1) Responding being fairly accurate so the mean for the left rate is negative
#    and for the right rate positive (the value of 2 is fairly typical for the
#    DDM.
# 2) The assumption that response caution is reduced from accuracy to neutral
#    to speed instruction.
#
# For pmean the p_vector above is reasonable. With some experimentation we use
# the following standard deviation.
psd <- c(v_Sleft=1,v_Sright=1,a=.3,a_Eneutral=.3,a_Eaccuracy=.3,
t0=.4,Z=1,sv=.4,SZ=1)
prior_DDMaE <- make_prior(design_DDMaE,pmean=p_vector,psd=psd)
# 2) combining the dadm, prior and a container for posterior MCMC chains.
# By default make_samplers makes a samplers object with three chains. It also
# assumes that response time is recorded with a resolution of 0.2 seconds (the
# typical 50Hz refresh rate of a monitor and hence in most experimental setups
# the maximum resolution for recording response times to visual stimuli). This
# specification is used to compress the dadm to speed up sampling, by keeping
# only rows with unique combinations of parameters, responses and rt values.
# During sampling log-likelihood calculations (which can be computationally
# expensive) is done only for these unique values, and the results then
# replicated appropriately and summed.
DDMaE <- make_samplers(dat, design_DDMaE, prior = prior_DDMaE)
# Next we run the sampling. This can take some time so you can instead load
# results that are stored in this project (i.e., load("DDMaE.RData")). By default
# 3 x 1000 samples will be obtained after burn in and adaptation (but possibly
# more if this is not enough to satisfy default convergence criteria). Here
# to speed things up we use parallel processing with the default one core per
# chain augmented by using 4 cores per chain (12 in total as this was done with
# a 12 core laptop, adjust as required for your system). The fileName argument
# saves intermediate progress (as an object called "samplers") to a file, which
# is prudent for longer runs in case they have to be restarted.
DDMaE <- run_emc(DDMaE, cores_per_chain = 4, fileName = 'tmp.RData', verbose = T)
remove.packages("EMC2")
.rs.restartR()
devtools::install()
library(EMC2)
load("~/Documents/UVA/2023/EMC2_Andrew/tmp.RData")
debug(EMC2:::check_gd)
run_emc(samplers)
gd_short
gd
(is.null(max_gd) & (mean(gd_short) < mean(gd))
)
is.null(max_gd) & (mean(gd_short) < mean(gd))
(!is.null(max_gd) &
(max(gd_short) < max(gd))))
(!is.null(max_gd) &
(max(gd_short) < max(gd)))
max(gd_short)
max(gd)
mean(gd_short)
mean(gd)
ok_max_gd
matplot(t(samplers[[1]]$samples$epsilon), type = "l")
# Next we run the sampling. This can take some time so you can instead load
# results that are stored in this project (i.e., load("DDMaE.RData")). By default
# 3 x 1000 samples will be obtained after burn in and adaptation (but possibly
# more if this is not enough to satisfy default convergence criteria). Here
# to speed things up we use parallel processing with the default one core per
# chain augmented by using 4 cores per chain (12 in total as this was done with
# a 12 core laptop, adjust as required for your system). The fileName argument
# saves intermediate progress (as an object called "samplers") to a file, which
# is prudent for longer runs in case they have to be restarted.
DDMaE <- run_emc(DDMaE, cores_per_chain = 4, fileName = 'tmp.RData', verbose = T)
undebug(EMC2:::check_gd)
# Next we run the sampling. This can take some time so you can instead load
# results that are stored in this project (i.e., load("DDMaE.RData")). By default
# 3 x 1000 samples will be obtained after burn in and adaptation (but possibly
# more if this is not enough to satisfy default convergence criteria). Here
# to speed things up we use parallel processing with the default one core per
# chain augmented by using 4 cores per chain (12 in total as this was done with
# a 12 core laptop, adjust as required for your system). The fileName argument
# saves intermediate progress (as an object called "samplers") to a file, which
# is prudent for longer runs in case they have to be restarted.
DDMaE <- run_emc(DDMaE, cores_per_chain = 4, fileName = 'tmp.RData', verbose = T)
# 2) combining the dadm, prior and a container for posterior MCMC chains.
# By default make_samplers makes a samplers object with three chains. It also
# assumes that response time is recorded with a resolution of 0.2 seconds (the
# typical 50Hz refresh rate of a monitor and hence in most experimental setups
# the maximum resolution for recording response times to visual stimuli). This
# specification is used to compress the dadm to speed up sampling, by keeping
# only rows with unique combinations of parameters, responses and rt values.
# During sampling log-likelihood calculations (which can be computationally
# expensive) is done only for these unique values, and the results then
# replicated appropriately and summed.
DDMaE <- make_samplers(dat, design_DDMaE, prior = prior_DDMaE)
# Next we run the sampling. This can take some time so you can instead load
# results that are stored in this project (i.e., load("DDMaE.RData")). By default
# 3 x 1000 samples will be obtained after burn in and adaptation (but possibly
# more if this is not enough to satisfy default convergence criteria). Here
# to speed things up we use parallel processing with the default one core per
# chain augmented by using 4 cores per chain (12 in total as this was done with
# a 12 core laptop, adjust as required for your system). The fileName argument
# saves intermediate progress (as an object called "samplers") to a file, which
# is prudent for longer runs in case they have to be restarted.
DDMaE <- run_emc(DDMaE, cores_per_chain = 4, fileName = 'tmp.RData', verbose = T)
save(DDMaE, file = "DDMaE.RData")
# levels of the hierarchical model, the population levesl, means (mu) variance
# and correlations, and individual (alpha), which is the case here. It also
# quantifies the efficiency of  sampling: as usual for the DDM, SZ and sv are
# sampled quite inefficiently (by a factor quantified by the integrated
# auto-correlation time), but for the remaining parameters the "effective"
# number of samples (i.e., the number after discounting auto-correlation) is
# between around a half to a third of the nominal number of samples. When
# performing posterior inference on a parameter (e.g., estimating 95% credible
# intervals) it is important that the effective sample size is sufficient to
# obtain stable estimates.
check_run(DDMaE)
# Full chain plots are saved to disk in a pdf, but we can also look at any of
# the different types of chains in the plot window, for example for ALPHA for
# the first subject:
plot_chains(DDMaE, subject = 1)
# The plot_pars function can be used to plot posterior densities population
# for each parameter (the same can be done for ) in black superimposed on priors
# (in red) to check the degree to which priors have been "updated" by the data.
# Ideally we want priors to be "dominated" by posteriors (i.e., the red line is
# flat and the black line sharply peaked). By default dominance is quantified by
# a contraction statistic, one minus the ratio of posterior to prior variance,
# which is close to one when dominance is achieved.
plot_pars(DDMaE, selection = "mu", layout = c(3,3))
# The same issues can be inspected on the natural scale with parameters mapped
# back to the experimental design.
plot_pars(DDMaE, selection = "mu", layout = c(3,3),mapped=TRUE)
devtools::document()
devtools::document()
devtools::load_all()
lapply(c("preburn", "burn", "adapt", "sample"), get_stop_criteria)
devtools::document()
?run_emc
devtools::document()
?run_emc
get_stop_criteria("sample")
devtools::check()
