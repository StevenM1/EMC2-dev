CI <- tapply(conflict[2,],dimnames(conflict)[[2]],mean)
print(CI)
afterC <- c(dimnames(conflict)[[2]]=="C")[-ntrials]
aC <- tapply(conflict[2,-ntrials],afterC,mean)
print(aC)
}
conflict <- make_conflict(sample(c("I","C","C","C"),1e4,replace=TRUE),M,fp)
statc(conflict)
conflict <- make_conflict(sample(c("I","I","I","C"),1e4,replace=TRUE),M,fp)
statc(conflict)
out
out[2,] = .5
out
apply(out,2,function(x)x/sumx)
apply(out,2,function(x)x/sum(x))
make_control <- function(tasks,c0,fp,normalize=FALSE) {
ntrials <- length(tasks)
out <- matrix(nrow=2,ncol=ntrials+1)
out[,1] <- c0
if (normalize) out[,1] <- out[,1]/sum(out[,1])
dimnames(out) <- list(names(c0),0:ntrials)
for (i in 2:(ntrials+1)) {
excite <- names(c0)[names(c0)==tasks[i-1]]
inhibit <- names(c0)[names(c0)!=tasks[i-1]]
out[excite,i] <- out[excite,i-1] + fp["F"]*(1-out[excite,i-1])
out[inhibit,i] <- out[inhibit,i-1] - fp["f"]*out[inhibit,i-1]
}
out <- out[,-1]
if (normalize) out <- apply(out,2,function(x)x/sum(x))
cued <- 1+(tasks=="B")
uncued <- 3-cued
stats <- rbind(cued=out[cbind(cued,1:ntrials)],d=out[cbind(cued,1:ntrials)] - out[cbind(uncued,1:ntrials)])
runs <- make_runs(tasks)-1
names(runs)[runs==0] <- "S"
names(runs)[runs!=0] <- paste0(runs[runs!=0])
dimnames(stats)[[2]] <- names(runs)
attr(out,"stats") <- stats
out
}
c0 <- c(A=.5,B=.5)
fp <- c(F=.8,f=.8)
control <- make_control(tasks,c0,fp)
plot_control(control,tasks,main=paste(names(fp),fp,sep="="))
fp <- c(F=.8,f=.4)
control <- make_control(tasks,c0,fp)
plot_control(control,tasks,main=paste(names(fp),fp,sep="="))
control <- make_control(tasks,c0,fp,normalize = TRUE)
plot_control(control,tasks,main=paste(names(fp),fp,sep="="))
# Second figure
fp <- c(F=.8,f=.8)
fp <- c(F=.8,f=.4)
control <- make_control(sample(c("A","B"),1e4,replace=TRUE),c0,fp)
plot_cd(control,main=paste(names(fp),fp,sep="="))
c0 <- c(A=.5,B=.5)
fp <- c(F=.8,f=.8)
control <- make_control(tasks,c0,fp)
plot_control(control,tasks,main=paste(names(fp),fp,sep="="))
fp <- c(F=.8,f=.4)
control <- make_control(tasks,c0,fp)
plot_control(control,tasks,main=paste(names(fp),fp,sep="="))
control <- make_control(tasks,c0,fp,normalize = TRUE)
plot_control(control,tasks,main=paste(names(fp),fp,sep="="))
fp <- c(F=.6,f=.6)
control <- make_control(tasks,c0,fp,normalize = TRUE)
plot_control(control,tasks,main=paste(names(fp),fp,sep="="))
control <- make_control(tasks,c0,fp,normalize = TRUE)
control
tasks=rep("B",10)
c0 <- c(A=.5,B=.5)
fp <- c(F=.8,f=.8)
control <- make_control(tasks,c0,fp)
plot_control(control,tasks,main=paste(names(fp),fp,sep="="))
fp <- c(F=.8,f=.4)
control <- make_control(tasks,c0,fp)
plot_control(control,tasks,main=paste(names(fp),fp,sep="="))
control <- make_control(tasks,c0,fp,normalize = TRUE)
plot_control(control,tasks,main=paste(names(fp),fp,sep="="))
fp <- c(F=.6,f=.6)
control <- make_control(tasks,c0,fp,normalize = TRUE)
plot_control(control,tasks,main=paste(names(fp),fp,sep="="))
congruency <- sample(c("I","C"),10,replace=TRUE)
congruency
congruency <- sample(c("I","C"),10,replace=TRUE)
congruency
congruency <- sample(c("I","C"),10,replace=TRUE)
congruency
fp <- c(F=.8,f=.8)
c0 <- c(R=.7,I=.3)
fp <- c(F=.8,f=.8)
normalize=FALSE
ntrials <- length(congruency)
out <- matrix(nrow=2,ncol=ntrials+1)
out[,1] <- c0
if (normalize) out[,1] <- out[,1]/sum(out[,1])
dimnames(out) <- list(names(c0),0:ntrials)
for (i in 2:(ntrials+1)) {
excite <- names(c0)[names(c0)==congruency[i-1]]
inhibit <- names(c0)[names(c0)!=congruency[i-1]]
out[excite,i] <- out[excite,i-1] + fp["F"]*(1-out[excite,i-1])
out[inhibit,i] <- out[inhibit,i-1] - fp["f"]*out[inhibit,i-1]
}
out <- out[,-1]
out
aR=.5;aI=0;bR=.5;bI=0.5
out["R",] <- aR + bR*out["R",]
out["I",] <- aI + bI*out["I",]
out
c0
congruency
names(c0)
i
i=2
names(c0)[congruency[i-1]=="I"]
congruency[i-1]
names(c0)
congruency
names(c0)
ntrials <- length(congruency)
out <- matrix(nrow=2,ncol=ntrials+1)
out[,1] <- c0
if (normalize) out[,1] <- out[,1]/sum(out[,1])
dimnames(out) <- list(names(c0),0:ntrials)
for (i in 2:(ntrials+1)) {
if (congruency[i-1]=="I") {
excite <- "R"
inhibit <- "I"
} else {
excite <- "I"
inhibit <- "R"
}
out[excite,i] <- out[excite,i-1] + fp["F"]*(1-out[excite,i-1])
out[inhibit,i] <- out[inhibit,i-1] - fp["f"]*out[inhibit,i-1]
}
out <- out[,-1]
out
congruency
fp
out["R",] <- aR + bR*out["R",]
out["I",] <- aI + bI*out["I",]
out
make_control <- function(congruency,c0,fp,normalize=FALSE,aR=.5,Ai=0,bR=.5,bI=0.5) {
ntrials <- length(congruency)
out <- matrix(nrow=2,ncol=ntrials+1)
out[,1] <- c0
if (normalize) out[,1] <- out[,1]/sum(out[,1])
dimnames(out) <- list(names(c0),0:ntrials)
for (i in 2:(ntrials+1)) {
if (congruency[i-1]=="I") {
excite <- "R"
inhibit <- "I"
} else {
excite <- "I"
inhibit <- "R"
}
out[excite,i] <- out[excite,i-1] + fp["F"]*(1-out[excite,i-1])
out[inhibit,i] <- out[inhibit,i-1] - fp["f"]*out[inhibit,i-1]
}
out <- out[,-1]
if (normalize) out <- apply(out,2,function(x)x/sum(x))
out["R",] <- aR + bR*out["R",]
out["I",] <- aI + bI*out["I",]
out
}
congruency <- sample(c("I","C"),10,replace=TRUE)
fp <- c(F=.8,f=.8)
c0 <- c(R=.7,I=.3)
conflict <- make_conflict(congruency,M,fp)
conflict
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
make_conflict <- function(congruency,c0,fp,normalize=FALSE,aR=.5,Ai=0,bR=.5,bI=0.5) {
ntrials <- length(congruency)
out <- matrix(nrow=2,ncol=ntrials+1)
out[,1] <- c0
if (normalize) out[,1] <- out[,1]/sum(out[,1])
dimnames(out) <- list(names(c0),0:ntrials)
for (i in 2:(ntrials+1)) {
if (congruency[i-1]=="I") {
excite <- "R"
inhibit <- "I"
} else {
excite <- "I"
inhibit <- "R"
}
out[excite,i] <- out[excite,i-1] + fp["F"]*(1-out[excite,i-1])
out[inhibit,i] <- out[inhibit,i-1] - fp["f"]*out[inhibit,i-1]
}
out <- out[,-1]
if (normalize) out <- apply(out,2,function(x)x/sum(x))
out["R",] <- aR + bR*out["R",]
out["I",] <- aI + bI*out["I",]
out
}
conflict <- make_conflict(congruency,M,fp)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
ntrials <- length(congruency)
out <- matrix(nrow=2,ncol=ntrials+1)
out[,1] <- c0
if (normalize) out[,1] <- out[,1]/sum(out[,1])
dimnames(out) <- list(names(c0),0:ntrials)
for (i in 2:(ntrials+1)) {
if (congruency[i-1]=="I") {
excite <- "R"
inhibit <- "I"
} else {
excite <- "I"
inhibit <- "R"
}
out[excite,i] <- out[excite,i-1] + fp["F"]*(1-out[excite,i-1])
out[inhibit,i] <- out[inhibit,i-1] - fp["f"]*out[inhibit,i-1]
}
out <- out[,-1]
if (normalize) out <- apply(out,2,function(x)x/sum(x))
out["R",] <- aR + bR*out["R",]
out["I",] <- aI + bI*out["I",]
out
make_conflict <- function(congruency,c0,fp,normalize=FALSE,aR=.5,Ai=0,bR=.5,bI=0.5) {
ntrials <- length(congruency)
out <- matrix(nrow=2,ncol=ntrials+1)
out[,1] <- c0
if (normalize) out[,1] <- out[,1]/sum(out[,1])
dimnames(out) <- list(names(c0),0:ntrials)
for (i in 2:(ntrials+1)) {
if (congruency[i-1]=="I") {
excite <- "R"
inhibit <- "I"
} else {
excite <- "I"
inhibit <- "R"
}
out[excite,i] <- out[excite,i-1] + fp["F"]*(1-out[excite,i-1])
out[inhibit,i] <- out[inhibit,i-1] - fp["f"]*out[inhibit,i-1]
}
out <- out[,-1]
if (normalize) out <- apply(out,2,function(x)x/sum(x))
out["R",] <- aR + bR*out["R",]
out["I",] <- aI + bI*out["I",]
out
}
conflict <- make_conflict(congruency,c0,fp)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
c0 <- c(R=.75,I=.25)
conflict <- make_conflict(congruency,c0,fp)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
fp <- c(F=.75,f=.75)
c0 <- c(R=.75,I=.25)
conflict <- make_conflict(congruency,c0,fp)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
middle = .75
aR=middle; bR=1-middle; aI=0; bI=middle
conflict <- make_conflict(congruency,c0,fp,aR=aR,bR=bR,aI=aI,bI=bI)
make_conflict <- function(congruency,c0,fp,normalize=FALSE,aR=.5,aI=0,bR=.5,bI=0.5) {
ntrials <- length(congruency)
out <- matrix(nrow=2,ncol=ntrials+1)
out[,1] <- c0
if (normalize) out[,1] <- out[,1]/sum(out[,1])
dimnames(out) <- list(names(c0),0:ntrials)
for (i in 2:(ntrials+1)) {
if (congruency[i-1]=="I") {
excite <- "R"
inhibit <- "I"
} else {
excite <- "I"
inhibit <- "R"
}
out[excite,i] <- out[excite,i-1] + fp["F"]*(1-out[excite,i-1])
out[inhibit,i] <- out[inhibit,i-1] - fp["f"]*out[inhibit,i-1]
}
out <- out[,-1]
if (normalize) out <- apply(out,2,function(x)x/sum(x))
out["R",] <- aR + bR*out["R",]
out["I",] <- aI + bI*out["I",]
out
}
congruency <- sample(c("I","C"),10,replace=TRUE)
fp <- c(F=.75,f=.75)
c0 <- c(R=.75,I=.25)
conflict <- make_conflict(congruency,c0,fp)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
middle = .75
aR=middle; bR=1-middle; aI=0; bI=middle
conflict <- make_conflict(congruency,c0,fp,aR=aR,bR=bR,aI=aI,bI=bI)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
make_conflict <- function(congruency,c0,fp,normalize=FALSE,aR=.5,aI=0,bR=.5,bI=0.5) {
ntrials <- length(congruency)
out <- matrix(nrow=2,ncol=ntrials+1)
out[,1] <- c0
if (normalize) out[,1] <- out[,1]/sum(out[,1])
dimnames(out) <- list(names(c0),0:ntrials)
for (i in 2:(ntrials+1)) {
if (congruency[i-1]=="I") {
excite <- "R"
inhibit <- "I"
} else {
excite <- "I"
inhibit <- "R"
}
out[excite,i] <- out[excite,i-1] + fp["F"]*(1-out[excite,i-1])
out[inhibit,i] <- out[inhibit,i-1] - fp["f"]*out[inhibit,i-1]
}
out <- out[,-1]
out["R",] <- aR + bR*out["R",]
out["I",] <- aI + bI*out["I",]
if (normalize) out <- apply(out,2,function(x)x/sum(x))
out
}
conflict <- make_conflict(congruency,c0,fp,aR=aR,bR=bR,aI=aI,bI=bI,normalize=TRUE)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
fp <- c(F=.75,f=.25)
conflict <- make_conflict(congruency,c0,fp)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
middle = .75
aR=middle; bR=1-middle; aI=0; bI=middle
conflict <- make_conflict(congruency,c0,fp,aR=aR,bR=bR,aI=aI,bI=bI)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
congruency <- sample(c("I","C"),10,replace=TRUE)
congruency
c0 <- c(R=.75,I=.25)
fp <- c(F=.75,f=.75)
fp <- c(F=.75,f=.25)
conflict <- make_conflict(congruency,c0,fp)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
middle = .75
aR=middle; bR=1-middle; aI=0; bI=middle
conflict <- make_conflict(congruency,c0,fp,aR=aR,bR=bR,aI=aI,bI=bI)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
c0 <- c(R=.75,I=.25)
fp <- c(F=.75,f=.75)
fp <- c(F=.75,f=.25)
c0 <- c(R=.75,I=.25)
fp <- c(F=.75,f=.75)
conflict <- make_conflict(congruency,c0,fp)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
middle = .75
aR=middle; bR=1-middle; aI=0; bI=middle
conflict <- make_conflict(congruency,c0,fp,aR=aR,bR=bR,aI=aI,bI=bI)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
plot_conflict <- function(control,congruency,main="") {
x <- 1:length(congruency)
plot(x,control[1,],type="l",ylim=c(0,1.15),xlab="trial",main=main,ylab="c",xlim=c(0,length(congruency)))
points(x,control[1,],pch=16)
lines(x,control[2,],lty=3)
points(x,control[2,])
for (i in 1:length(congruency)) text(i-1,1.1,congruency[i])
}
c0 <- c(R=.75,I=.25)
fp <- c(F=.75,f=.75)
# fp <- c(F=.75,f=.25)
conflict <- make_conflict(congruency,c0,fp)
plot_control(conflict,congruency,main=paste(names(fp),fp,sep="="))
plot_conflict(conflict,congruency,main=paste(names(fp),fp,sep="="))
plot_conflict <- function(control,congruency,c0,main="") {
x <- 1:length(congruency)
control <- cbind(c0,control)
plot(control[1,],type="l",ylim=c(0,1.15),xlab="trial",main=main,ylab="c",xlim=c(0,length(congruency)))
points(control[1,],pch=16)
lines(control[2,],lty=3)
points(control[2,])
for (i in 1:length(congruency)) text(i-1,1.1,congruency[i])
}
plot_conflict <- function(control,congruency,c0,main="") {
x <- 1:length(congruency)
control <- cbind(c0,control)
plot(control[1,],type="l",ylim=c(0,1.15),xlab="trial",main=main,ylab="c",xlim=c(0,length(congruency)))
points(control[1,],pch=16)
lines(control[2,],lty=3)
points(control[2,])
for (i in 1:length(congruency)) text(i-1,1.1,congruency[i])
}
conflict <- make_conflict(congruency,c0,fp)
plot_conflict(conflict,congruency,c0,main=paste(names(fp),fp,sep="="))
plot_conflict <- function(control,congruency,c0,main="") {
x <- 1:length(congruency)
control <- cbind(c0,control)
plot(control[1,],type="l",ylim=c(0,1.15),xlab="trial",main=main,ylab="c",xlim=c(0,length(congruency)))
points(control[1,],pch=16)
lines(control[2,],lty=3)
points(control[2,])
for (i in 1:length(congruency)) text(i-1,1.1,congruency[i])
}
conflict <- make_conflict(congruency,c0,fp)
plot_conflict(conflict,congruency,c0,main=paste(names(fp),fp,sep="="))
plot_conflict <- function(control,congruency,c0,main="") {
x <- 0:length(congruency)
control <- cbind(c0,control)
plot(x,control[1,],type="l",ylim=c(0,1.15),xlab="trial",main=main,ylab="c",xlim=c(0,length(congruency)))
points(x,control[1,],pch=16)
lines(x,control[2,],lty=3)
points(x,control[2,])
for (i in 1:length(congruency)) text(i-1,1.1,congruency[i])
}
plot_conflict(conflict,congruency,c0,main=paste(names(fp),fp,sep="="))
middle = .75
aR=middle; bR=1-middle; aI=0; bI=middle
conflict <- make_conflict(congruency,c0,fp,aR=aR,bR=bR,aI=aI,bI=bI)
plot_conflict(conflict,congruency,c0,main=paste(names(fp),fp,sep="="))
c0 <- c(R=.75,I=.25)
fp <- c(F=.8,f=.8)
# fp <- c(F=.75,f=.25)
conflict <- make_conflict(congruency,c0,fp)
plot_conflict(conflict,congruency,c0,main=paste(names(fp),fp,sep="="))
middle = .75
aR=middle; bR=1-middle; aI=0; bI=middle
conflict <- make_conflict(congruency,c0,fp,aR=aR,bR=bR,aI=aI,bI=bI)
plot_conflict(conflict,congruency,c0,main=paste(names(fp),fp,sep="="))
congruency <- sample(c("I","C"),1e4,replace=TRUE)
c0 <- c(R=.75,I=.25)
fp <- c(F=.8,f=.8)
conflict <- make_conflict(congruency,c0,fp)
dim(conflict)
head(t(confict))
head(t(conflict))
make_conflict <- function(congruency,c0,fp,normalize=FALSE,aR=.5,aI=0,bR=.5,bI=0.5) {
ntrials <- length(congruency)
out <- matrix(nrow=2,ncol=ntrials+1)
out[,1] <- c0
if (normalize) out[,1] <- out[,1]/sum(out[,1])
dimnames(out) <- list(names(c0),0:ntrials)
for (i in 2:(ntrials+1)) {
if (congruency[i-1]=="I") {
excite <- "R"
inhibit <- "I"
} else {
excite <- "I"
inhibit <- "R"
}
out[excite,i] <- out[excite,i-1] + fp["F"]*(1-out[excite,i-1])
out[inhibit,i] <- out[inhibit,i-1] - fp["f"]*out[inhibit,i-1]
}
out <- out[,-1]
out["R",] <- aR + bR*out["R",]
out["I",] <- aI + bI*out["I",]
if (normalize) out <- apply(out,2,function(x)x/sum(x))
dimnames(out)[[2]] <- congruency
out
}
conflict <- make_conflict(congruency,c0,fp)
head(t(conflict))
tapply(conflict["R",],dimnames(conflict)[[2]],mean)
tapply(apply(conflict,2,diff),dimnames(conflict)[[2]],mean)
tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean)
congruency <- sample(c("I","I","I","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
tapply(conflict["R",],dimnames(conflict)[[2]],mean)
tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean)
c(mean(conflict["R",]),mean(-apply(conflict,2,diff)))
# I:C 50:50
congruency <- sample(c("I","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
tapply(conflict["R",],dimnames(conflict)[[2]],mean)
tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean)
c(mean(conflict["R",]),mean(-apply(conflict,2,diff)))
# I:C 75:25
congruency <- sample(c("I","I","I","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
tapply(conflict["R",],dimnames(conflict)[[2]],mean)
tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean)
c(mean(conflict["R",]),mean(-apply(conflict,2,diff)))
c(mean(conflict["R",]),mean(conflict["I",]),mean(-apply(conflict,2,diff)))
congruency <- sample(c("I","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
tapply(conflict["R",],dimnames(conflict)[[2]],mean)
tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean)
c(mean(conflict["R",]),mean(conflict["I",]),mean(-apply(conflict,2,diff)))
# I:C 75:25
congruency <- sample(c("I","I","I","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
tapply(conflict["R",],dimnames(conflict)[[2]],mean)
tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean)
c(mean(conflict["R",]),mean(conflict["I",]),mean(-apply(conflict,2,diff)))
congruency <- sample(c("I","C","C","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
tapply(conflict["R",],dimnames(conflict)[[2]],mean)
tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean)
c(mean(conflict["R",]),mean(conflict["I",]),mean(-apply(conflict,2,diff)))
# I:C 25:75
congruency <- sample(c("I","C","C","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
tapply(conflict["R",],dimnames(conflict)[[2]],mean)
tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean)
c(mean(conflict["R",]),mean(conflict["I",]),mean(-apply(conflict,2,diff)))
# I:C 50:50
congruency <- sample(c("I","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
tapply(conflict["R",],dimnames(conflict)[[2]],mean)
tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean)
c(mean(conflict["R",]),mean(conflict["I",]),mean(-apply(conflict,2,diff)))
# I:C 75:25
congruency <- sample(c("I","I","I","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
tapply(conflict["R",],dimnames(conflict)[[2]],mean)
tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean)
c(mean(conflict["R",]),mean(conflict["I",]),mean(-apply(conflict,2,diff)))
c0 <- c(R=.75,I=.25)
fp <- c(F=.8,f=.8)
# I:C 25:75
congruency <- sample(c("I","C","C","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
round(tapply(conflict["R",],dimnames(conflict)[[2]],mean),2)
round(tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean),2)
round(c(mean(conflict["R",]),mean(conflict["I",]),mean(-apply(conflict,2,diff))),2)
# I:C 50:50
congruency <- sample(c("I","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
round(tapply(conflict["R",],dimnames(conflict)[[2]],mean),2)
round(tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean),2)
round(c(mean(conflict["R",]),mean(conflict["I",]),mean(-apply(conflict,2,diff))),2)
# I:C 75:25
congruency <- sample(c("I","I","I","C"),1e4,replace=TRUE)
conflict <- make_conflict(congruency,c0,fp)
round(tapply(conflict["R",],dimnames(conflict)[[2]],mean),2)
round(tapply(-apply(conflict,2,diff),dimnames(conflict)[[2]],mean),2)
round(c(mean(conflict["R",]),mean(conflict["I",]),mean(-apply(conflict,2,diff))),2)
