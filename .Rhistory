library(usethis)
usethis::create_package()
usethis::use_description()
devtools::load_all()
ls()
devtools::check()
dLNR
devtools::check()
ls()
devtools::load_all()
dir()
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian())
devtools::check()
?is
?inherits
devtools::check()
devtools::check()
# Be in EMC2 directory to load package as follows
devtools::load_all()
rm(list=ls())
# NB: Stop *must* be first level of Rlevels
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian())
p_vector <- sampled_p_vector(design=designEXG,model=SSexGaussian)
# Be in EMC2 directory to load package as follows
devtools::load_all()
# Staircase run where SSD is NA, starting point, step, and min and max SSD
# values controlled by defaults set in model
dataEXG <- make_data(p_vector,design=designEXG,trials=10000)
devtools::load_all()
rm(list=ls())
# NB: Stop *must* be first level of Rlevels
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian())
p_vector <- sampled_p_vector(design=designEXG,model=SSexGaussian)
sampled_p_vector
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
rm(list=ls())
# NB: Stop *must* be first level of Rlevels
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian())
devtools::check()
devtools::load_all()
rm(list=ls())
# NB: Stop *must* be first level of Rlevels
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian())
devtools::load_all()
rm(list=ls())
# NB: Stop *must* be first level of Rlevels
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian())
SSexGaussian
sampled_p_vector
Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1)
Ffactors=list(subjects=1,S=c("left","right"))
Rlevels=c("stop","left","right")
matchfun=function(d)as.character(d$S)==as.character(d$lR)
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1)
S=contr.helmert
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert)
Fcovariates="SSD"
model=SSexGaussian()
model
class(model)
rm(list=ls())
# NB: Stop *must* be first level of Rlevels
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian)
p_vector <- sampled_p_vector(design=designEXG,model=SSexGaussian)
p_vector[1:2] <- log(c(.6,.75)) # Intercept and (multiplicative) quality
p_vector[3:4] <- c(log(.05),log(0.1)) # sigma and tau
p_vector[5:7] <- c(log(.2),log(.05),log(0.1)) # muS, sigmaS and tauS
p_vector[8:9] <- c(qnorm(0),qnorm(0))
p_vector[8:9] <- c(qnorm(.05),qnorm(0))
p_vector[8:9] <- c(qnorm(0),qnorm(.1))
p_vector[8:9] <- c(qnorm(.05),qnorm(.1))
# Staircase run where SSD is NA, starting point, step, and min and max SSD
# values controlled by defaults set in model
dataEXG <- make_data(p_vector,design=designEXG,trials=10000)
# Mixture of three cases
dataEXG$SSD <- rep(c(rep(Inf,300),rep(c(.1,.2,.3),100),rep(NA,400)),times=2)
# All staircase
dataEXG$SSD <- rep(NA,dim(dataEXG)[1])
dataEXG <- make_data(p_vector,design=designEXG,data=dataEXG)
# Need to specify factors to avoid including SSD
plot_defective_density(dataEXG,layout=c(1,2),factors="S")
dadm <- design_model(dataEXG,designEXG)
rlike <- attr(dadm,"model")$log_likelihood(p_vector,dadm)
rlike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
rlike
Rcpp::sourceCpp(file = "model_EXGSS.cpp")
dir()
Rcpp::sourceCpp(file = "../model_EXGSS.cpp")
clike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
summary(rlike-clike)
rlike-clike
n=10
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")$log_likelihood(p_vector,dadm)
})
n=10
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
dEXGrace
rm(pEXG,dEXG,dEXGrace,stopfn_exg)
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
pEXG
dEXG
devtools::check()
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
# Be in EMC2 directory to load package as follows
devtools::load_all()
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
pEXG
getAnywhere(pEXG)
getAnywhere("pEXG")
# Be in EMC2 directory to load package as follows
devtools::load_all()
rm(list=ls())
# NB: Stop *must* be first level of Rlevels
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian)
p_vector <- sampled_p_vector(design=designEXG,model=SSexGaussian)
p_vector[1:2] <- log(c(.6,.75)) # Intercept and (multiplicative) quality
p_vector[3:4] <- c(log(.05),log(0.1)) # sigma and tau
p_vector[5:7] <- c(log(.2),log(.05),log(0.1)) # muS, sigmaS and tauS
p_vector[8:9] <- c(qnorm(0),qnorm(0))
p_vector[8:9] <- c(qnorm(.05),qnorm(0))
p_vector[8:9] <- c(qnorm(0),qnorm(.1))
p_vector[8:9] <- c(qnorm(.05),qnorm(.1))
# Staircase run where SSD is NA, starting point, step, and min and max SSD
# values controlled by defaults set in model
dataEXG <- make_data(p_vector,design=designEXG,trials=10000)
# Mixture of three cases
dataEXG$SSD <- rep(c(rep(Inf,300),rep(c(.1,.2,.3),100),rep(NA,400)),times=2)
# All staircase
dataEXG$SSD <- rep(NA,dim(dataEXG)[1])
dataEXG <- make_data(p_vector,design=designEXG,data=dataEXG)
# Need to specify factors to avoid including SSD
plot_defective_density(dataEXG,layout=c(1,2),factors="S")
# Checks out
dadm <- design_model(dataEXG,designEXG)
rlike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
pEXG
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
# Be in EMC2 directory to load package as follows
devtools::load_all()
pEXG
getAnywhere(pEXG)
getAnywhere("pEXG")
clike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
rlike-clike
# Checks out
dadm <- design_model(dataEXG,designEXG)
clike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
rlike-clike
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
?pEXG
rlike
clike
pEXG(1)
devtools::check()
# Be in EMC2 directory to load package as follows
devtools::load_all()
designRDEX <- make_design(Flist=list(v ~ lM, B ~ 1, A ~ 1, t0 ~ 1, s~1,
muS~1,sigmaS~1,tauS~1,gf~1,tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",constants = c(s=log(1)),model=SSrdexB)
p_vector <- sampled_p_vector(designRDEX,SSrdexB)
p_vector[1:2] <- log(c(4,1.25)) # Intercept and (multiplicative) quality
p_vector[3:4] <- c(log(1),log(0.1)) # B and A
p_vector[5] <- log(c(0.3))   # log scale t0
p_vector[6:8] <- log(c(.2,.05,.1)) # log scale mu,sigma,tau
p_vector[9:10] <- c(qnorm(0),qnorm(0))
p_vector[9:10] <- c(qnorm(.05),qnorm(0))
p_vector[9:10] <- c(qnorm(0),qnorm(.1))
p_vector[9:10] <- c(qnorm(.05),qnorm(.1))
dataRDEX <- make_data(p_vector,design=designRDEX,trials=1000)
# Mix of all
dataRDEX$SSD <- rep(c(rep(Inf,300),rep(c(.1,.2,.3),100),rep(NA,400)),times=2)
# All staircase
dataRDEX$SSD <- rep(NA,dim(dataRDEX)[1])
dataRDEX <- make_data(p_vector,design=designRDEX,data=dataRDEX)
plot_defective_density(dataRDEX,layout=c(1,2),factors="S")
# Check C speedup
dadm <- design_model(dataRDEX,designRDEX,compress=FALSE)
p_mat <- matrix(rep(p_vector,each=dim(dadm)[1]),ncol=length(p_vector),
dimnames=list(rep(1,dim(dadm)[1]),names(p_vector)))
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
# p_mat <- p_mat+runif(length(p_mat),-.5,.5)
out[i] <- attr(dadm,"model")$log_likelihood(p_mat,dadm)
})
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
# p_mat <- p_mat+runif(length(p_mat),-.5,.5)
out[i] <- attr(dadm,"model")()$log_likelihood(p_mat,dadm)
})
out[1]
out[2]
rm(list=ls())
# Be in EMC2 directory to load package as follows
devtools::load_all()
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian)
p_vector <- sampled_p_vector(design=designEXG,model=SSexGaussian)
p_vector[1:2] <- log(c(.6,.75)) # Intercept and (multiplicative) quality
p_vector[3:4] <- c(log(.05),log(0.1)) # sigma and tau
p_vector[5:7] <- c(log(.2),log(.05),log(0.1)) # muS, sigmaS and tauS
p_vector[8:9] <- c(qnorm(0),qnorm(0))
p_vector[8:9] <- c(qnorm(.05),qnorm(0))
p_vector[8:9] <- c(qnorm(0),qnorm(.1))
p_vector[8:9] <- c(qnorm(.05),qnorm(.1))
# Staircase run where SSD is NA, starting point, step, and min and max SSD
# values controlled by defaults set in model
dataEXG <- make_data(p_vector,design=designEXG,trials=10000)
# Mixture of three cases
dataEXG$SSD <- rep(c(rep(Inf,300),rep(c(.1,.2,.3),100),rep(NA,400)),times=2)
# All staircase
dataEXG$SSD <- rep(NA,dim(dataEXG)[1])
dataEXG <- make_data(p_vector,design=designEXG,data=dataEXG)
# Need to specify factors to avoid including SSD
plot_defective_density(dataEXG,layout=c(1,2),factors="S")
# Checks out
dadm <- design_model(dataEXG,designEXG)
clike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
clike
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
# Be in EMC2 directory to load package as follows
devtools::load_all()
rlike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
rlike-clike
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
pEXG
save(dataEXG,file="dataEXG.RData")
ls()
load("/Volumes/Data/Projects/EMCpackage/dataEXG.RData")
# Be in EMC2 directory to load package as follows
devtools::load_all()
# Checks out
dadm <- design_model(dataEXG,designEXG)
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian)
p_vector <- sampled_p_vector(design=designEXG,model=SSexGaussian)
p_vector[1:2] <- log(c(.6,.75)) # Intercept and (multiplicative) quality
p_vector[3:4] <- c(log(.05),log(0.1)) # sigma and tau
p_vector[5:7] <- c(log(.2),log(.05),log(0.1)) # muS, sigmaS and tauS
p_vector[8:9] <- c(qnorm(0),qnorm(0))
p_vector[8:9] <- c(qnorm(.05),qnorm(0))
p_vector[8:9] <- c(qnorm(0),qnorm(.1))
p_vector[8:9] <- c(qnorm(.05),qnorm(.1))
# Checks out
dadm <- design_model(dataEXG,designEXG)
rlike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
rlike
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
pEXG
# Be in EMC2 directory to load package as follows
devtools::load_all()
load("/Volumes/Data/Projects/EMCpackage/dataEXG.RData")
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian)
p_vector <- sampled_p_vector(design=designEXG,model=SSexGaussian)
p_vector[1:2] <- log(c(.6,.75)) # Intercept and (multiplicative) quality
p_vector[3:4] <- c(log(.05),log(0.1)) # sigma and tau
p_vector[5:7] <- c(log(.2),log(.05),log(0.1)) # muS, sigmaS and tauS
p_vector[8:9] <- c(qnorm(0),qnorm(0))
p_vector[8:9] <- c(qnorm(.05),qnorm(0))
p_vector[8:9] <- c(qnorm(0),qnorm(.1))
p_vector[8:9] <- c(qnorm(.05),qnorm(.1))
# Checks out
dadm <- design_model(dataEXG,designEXG)
clike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
clike
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
# Be in EMC2 directory to load package as follows
devtools::load_all()
rlike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm) # [1] 2684.95
rlike
load("/Volumes/Data/Projects/EMCpackage/dataEXG.RData")
load("/Volumes/Data/Projects/EMCpackage/dataEXG.RData")
# Be in EMC2 directory to load package as follows
devtools::load_all()
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian)
p_vector <- sampled_p_vector(design=designEXG,model=SSexGaussian)
p_vector[1:2] <- log(c(.6,.75)) # Intercept and (multiplicative) quality
p_vector[3:4] <- c(log(.05),log(0.1)) # sigma and tau
p_vector[5:7] <- c(log(.2),log(.05),log(0.1)) # muS, sigmaS and tauS
p_vector[8:9] <- c(qnorm(0),qnorm(0))
p_vector[8:9] <- c(qnorm(.05),qnorm(0))
p_vector[8:9] <- c(qnorm(0),qnorm(.1))
p_vector[8:9] <- c(qnorm(.05),qnorm(.1))
# Checks out
dadm <- design_model(dataEXG,designEXG)
rlike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm) # [1] 2684.95
rlike
# Be in EMC2 directory to load package as follows
devtools::load_all()
?load_all
# Be in EMC2 directory to load package as follows
devtools::load_all(recompile = TRUE)
# Be in EMC2 directory to load package as follows
devtools::load_all()
devtools::check()
# Be in EMC2 directory to load package as follows
devtools::load_all()
devtools::check()
# Be in EMC2 directory to load package as follows
devtools::load_all()
load("/Volumes/Data/Projects/EMCpackage/dataEXG.RData")
designEXG <- make_design(Flist=list(mu ~ lM, sigma ~ 1, tau ~ 1, muS~1, sigmaS~1, tauS~1, gf~ 1, tf~1),
Ffactors=list(subjects=1,S=c("left","right")),Rlevels=c("stop","left","right"),
matchfun=function(d)as.character(d$S)==as.character(d$lR),
Clist=list(lM=matrix(c(-1/2,1/2),ncol=1),S=contr.helmert),
Fcovariates="SSD",model=SSexGaussian)
p_vector <- sampled_p_vector(design=designEXG,model=SSexGaussian)
p_vector[1:2] <- log(c(.6,.75)) # Intercept and (multiplicative) quality
p_vector[3:4] <- c(log(.05),log(0.1)) # sigma and tau
p_vector[5:7] <- c(log(.2),log(.05),log(0.1)) # muS, sigmaS and tauS
p_vector[8:9] <- c(qnorm(0),qnorm(0))
p_vector[8:9] <- c(qnorm(.05),qnorm(0))
p_vector[8:9] <- c(qnorm(0),qnorm(.1))
p_vector[8:9] <- c(qnorm(.05),qnorm(.1))
# Checks out
dadm <- design_model(dataEXG,designEXG)
clike <- attr(dadm,"model")()$log_likelihood(p_vector,dadm) # [1] -20776.74
clike
n=100
out <- numeric(n)
system.time({
for (i in 1:n)
out[i] <- attr(dadm,"model")()$log_likelihood(p_vector,dadm)
})
