Rlevels=levels(dat$R),
Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1)),
model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_at0_full)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
debug(EMC2:::calc_ll_manager)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = T)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
lls <- apply(proposals, 1, ll_func, dadm = dadm)
lls
t1 <- calc_ll(proposals, dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
debug(EMC2:::calc_ll_manager)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
lls <- apply(proposals, 1, ll_func, dadm = dadm)
lls
t1 <- calc_ll(proposals[1:2,], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
t1
lls
t1 <- calc_ll(proposals[c(91,93),], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
t1
t1 <- calc_ll(proposals[c(1,93),], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
t1
apply(proposals[c(1,93)], 1, ll_func, dadm = dadm)
apply(proposals[c(1,93),], 1, ll_func, dadm = dadm)
remove.packages("EMC2")
.rs.restartR()
install()
rm(list = ls())
library(devtools)
library(EMC2)
print(load("test_files/PNAS.RData"))
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
Vmat <- matrix(c(-1,1),ncol=1,dimnames=list(NULL,""))
Vmat
design_at0_full <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),
Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1)),
model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_at0_full)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
debug(EMC2:::calc_ll_manager)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
lls <- apply(proposals, 1, ll_func, dadm = dadm)
lls
Q
remove.packages("EMC2")
install()
rm(list = ls())
library(devtools)
library(EMC2)
print(load("test_files/PNAS.RData"))
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
Vmat <- matrix(c(-1,1),ncol=1,dimnames=list(NULL,""))
Vmat
design_at0_full <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),
Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1)),
model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_at0_full)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
debug(EMC2:::calc_ll_manager)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
calc_ll(proposals[1:2,], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
remove.packages("EMC2")
.rs.restartR()
.rs.restartR()
install()
rm(list = ls())
library(devtools)
library(EMC2)
print(load("test_files/PNAS.RData"))
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
Vmat <- matrix(c(-1,1),ncol=1,dimnames=list(NULL,""))
Vmat
design_at0_full <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),
Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1)),
model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_at0_full)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
debug(EMC2:::calc_ll_manager)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
Q
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
calc_ll(proposals[1,,drop = F], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
lls <- apply(proposals[1,,drop = F], 1, ll_func, dadm = dadm)
lls
debug(rtdists::ddiffusion)
lls <- apply(proposals[1,,drop = F], 1, ll_func, dadm = dadm)
densities
ok_rows <- pars$parameter_indices[[1]]
pars$params[ok_rows[1], 9]
pars$params[ok_rows[1],
1:8]
debug(EMC2:::calc_ll_manager)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
calc_ll(proposals[1,,drop = F], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
apply(proposals[1,,drop = F], 1, ll_func, dadm = dadm)
undebug(ddifussion)
undebug(rtdists::ddifussion)
undebug(rtdists::ddiffussion)
undebug(rtdists::ddiffusion)
debug(ll_func)
apply(proposals[1,,drop = F], 1, ll_func, dadm = dadm)
debug(log_likelihood_ddm)
debug(get_pars)
debug(attr(dadm, "model")()$Ttransform)
pars
test <- pars[1,,drop = F]
test
test["t0"] + test["st0"]/2
test["t0"]
test[4] + test[5]/2
debug(rtdists::ddiffusion)
debug(prepare_diffusion_parameter)
test
prepare_diffusion_parameter
pars$params[ok_rows[1],
1:8]
2.88/2.25
0.1512+0.187/2
0.22 * (0.82*2-1)
0.32 * (0.82*2-1)
0.2296*(0.829*2 -1)
2*0.9433*0.32
2*0.9433*(1-0.32)
2*0.9433*0.722
remove.packages("EMC2")
rs.restartR()
.rs.restartR()
install()
rm(list = ls())
library(devtools)
library(EMC2)
print(load("test_files/PNAS.RData"))
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
Vmat <- matrix(c(-1,1),ncol=1,dimnames=list(NULL,""))
Vmat
design_at0_full <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),
Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1)),
model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_at0_full)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
debug(EMC2:::calc_ll_manager)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
lls
t1 <- apply(proposals, 1, ll_func, dadm = dadm)
all.equal(lls, t1)
lls
t1
.rs.restartR()
remove.packages("EMC2")
.rs.restartR()
install()
rm(list = ls())
library(devtools)
library(EMC2)
print(load("test_files/PNAS.RData"))
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
Vmat <- matrix(c(-1,1),ncol=1,dimnames=list(NULL,""))
Vmat
design_at0_full <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),
Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1)),
model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_at0_full)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
debug(EMC2:::calc_ll_manager)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
lls <- apply(proposals, 1, ll_func, dadm = dadm)
lls
calc_ll(proposals[1,,drop = F], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
calc_ll(proposals[23,,drop = F], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
lls[37]
lls[23]
calc_ll(proposals[37,,drop = F], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
lls[37]
t1 <- calc_ll(proposals, dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
t1
lls
all.equal(t1, lls)
t1 <- calc_ll(proposals[13,], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
t1 <- calc_ll(proposals[13,, drop = F], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
t1
t1 <- calc_ll(proposals[15,, drop = F], dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
t1
lls[15]
debug(rtdists::ddiffusion)
lls <- apply(proposals[15,,drop = F], 1, ll_func, dadm = dadm)
densities
ok_rows <- pars$parameter_indices[[1]]
d_fastdm(rt[ok_rows], pars$params[ok_rows[1],
1:8], precision, pars$params[ok_rows[1], 9], stop_on_error)
log(abs(d_fastdm(rt[ok_rows], pars$params[ok_rows[1],
1:8], precision, pars$params[ok_rows[1], 9], stop_on_error)))
pars$params[ok_rows[1],
1:8]
debug(log_likelihood_ddm)
lls <- apply(proposals[15,,drop = F], 1, ll_func, dadm = dadm)
pars
t1 <- pars[1,]
t1
2*0.6522 * 0.508
2*0.6522 * 0.508 * 2.5599
remove.packages("EMC2")
.rs.restartR()
install()
rm(list = ls())
library(devtools)
library(EMC2)
print(load("test_files/PNAS.RData"))
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
Vmat <- matrix(c(-1,1),ncol=1,dimnames=list(NULL,""))
Vmat
design_at0_full <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),
Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1)),
model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_at0_full)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
debug(EMC2:::calc_ll_manager)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
lls
apply(proposals, 1, ll_func, dadm = dadm)
apply(proposals, 1, ll_func, dadm = dadm)
rm(list = ls())
library(devtools)
library(EMC2)
print(load("test_files/PNAS.RData"))
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
Vmat <- matrix(c(-1,1),ncol=1,dimnames=list(NULL,""))
Vmat
design_at0_full <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),
Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1)),
model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_at0_full)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
debug(EMC2:::calc_ll_manager)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
lls <- apply(proposals, 1, ll_func, dadm = dadm)
lls
lls <- apply(proposals, 1, ll_func, dadm = dadm)
lls
lls
lls <- apply(proposals, 1, ll_func, dadm = dadm)
lls
t1 <- calc_ll(proposals, dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
all.equal(lls, t1)
lls
t1
lls <- apply(proposals, 1, ll_func, dadm = dadm)
lls
t1 <-  calc_ll(proposals, dadm, constants = constants,
n_trials = n_trials, designs = designs, type = c_name,
p_types = p_types, min_ll = log(1e-10), winner = dadm$winner,
expand = attr(dadm, "expand"), group_idx = parameter_indices)
all.equal(t1, lls)
microbenchmark::microbenchmark(
run_samplers(samplers, stage = "preburn", iter = 10, useC = T),
run_samplers(sampler, stage = "preburn", iter = 10), times = 3
)
microbenchmark::microbenchmark(
run_samplers(samplers, stage = "preburn", iter = 10, useC = T),
run_samplers(samplers, stage = "preburn", iter = 10), times = 3
)
chain_n(samplers)
rm(list = ls())
library(devtools)
library(EMC2)
print(load("test_files/PNAS.RData"))
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
Vmat <- matrix(c(-1,1),ncol=1,dimnames=list(NULL,""))
Vmat
# design_at0_full <- make_design(
#   Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
#   Rlevels=levels(dat$R),
#   Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
#   constants=c(s=log(1)),
#   model=ddmTZD)
design_a <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),
Clist=list(S=Vmat,E=Emat),
Flist=list(v~S,a~E,sv~1, t0~1, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1),st0=log(0),DP=qnorm(0.5),SZ=qnorm(0),sv=log(0)),
model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_a)
samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
microbenchmark::microbenchmark(
run_samplers(samplers, stage = "preburn", iter = 10, useC = T),
run_samplers(samplers, stage = "preburn", iter = 10), times = 3
)
microbenchmark::microbenchmark(
run_samplers(samplers, stage = "preburn", iter = 30, useC = T),
run_samplers(samplers, stage = "preburn", iter = 30), times = 10
)
rm(list = ls())
library(devtools)
library(EMC2)
print(load("test_files/PNAS.RData"))
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
Vmat <- matrix(c(-1,1),ncol=1,dimnames=list(NULL,""))
Vmat
# design_at0_full <- make_design(
#   Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
#   Rlevels=levels(dat$R),
#   Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
#   constants=c(s=log(1)),
#   model=ddmTZD)
design_a <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),
Clist=list(S=Vmat,E=Emat),
Flist=list(v~S,a~E,sv~1, t0~1, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1),st0=log(0),DP=qnorm(0.5),SZ=qnorm(0),sv=log(0)),
model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_a)
# samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
#
# samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
samplers <- auto_burn(samplers, verbose = T, cores_per_chain = 3, cores_for_chains = 3, useC = T)
rm(list = ls())
library(devtools)
library(EMC2)
print(load("test_files/PNAS.RData"))
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
Vmat <- matrix(c(-1,1),ncol=1,dimnames=list(NULL,""))
Vmat
# design_at0_full <- make_design(
#   Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
#   Rlevels=levels(dat$R),
#   Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
#   constants=c(s=log(1)),
#   model=ddmTZD)
design_a <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),
Clist=list(S=Vmat,E=Emat),
Flist=list(v~S,a~E,sv~1, t0~1, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1),st0=log(0),DP=qnorm(0.5),SZ=qnorm(0),sv=log(0)),
model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_a)
# samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
#
# samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
samplers <- auto_burn(samplers, verbose = T, cores_per_chain = 3, cores_for_chains = 3, useC = T)
rm(list = ls())
library(devtools)
library(EMC2)
print(load("test_files/PNAS.RData"))
dat <- data[,c("s","E","S","R","RT")]
names(dat)[c(1,5)] <- c("subjects","rt")
levels(dat$R) <- levels(dat$S)
Emat <- matrix(c(0,-1,0,0,0,-1),nrow=3)
dimnames(Emat) <- list(NULL,c("a-n","a-s"))
Emat
Vmat <- matrix(c(-1,1),ncol=1,dimnames=list(NULL,""))
Vmat
design_at0_full <- make_design(
Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
Rlevels=levels(dat$R),
Flist=list(v~S,a~E,sv~1, t0~E, st0~1, s~1, Z~1, SZ~1, DP~1),
constants=c(s=log(1)),
model=ddmTZD)
# design_a <- make_design(
#   Ffactors=list(subjects=levels(dat$subjects),S=levels(dat$S),E=levels(dat$E)),
#   Rlevels=levels(dat$R),
#   Clist=list(S=Vmat,E=Emat),
#   Flist=list(v~S,a~E,sv~1, t0~1, st0~1, s~1, Z~1, SZ~1, DP~1),
#   constants=c(s=log(1),st0=log(0),DP=qnorm(0.5),SZ=qnorm(0),sv=log(0)),
#   model=ddmTZD)
dat2 <- dat[which(dat$subjects %in% (unique(dat$subjects)[1:3])),]
dat2 <- droplevels(dat2)
samplers <- make_samplers(dat2, design_at0_full)
# samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 3, cores_for_chains = 3, verbose = T, useC = F)
#
# samplers <- run_samplers(samplers, stage = "preburn", iter = 10, cores_per_chain = 1, cores_for_chains = 1, verbose = T, useC = T)
samplers <- auto_burn(samplers, verbose = T, cores_per_chain = 3, cores_for_chains = 3, useC = T)
