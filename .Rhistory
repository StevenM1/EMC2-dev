length.out = 900, true_pars = samplers,
use_prior_lim = T, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
devtools::load_all()
true_samplers <- rapply(samplers, function(x){if(is.numeric(x)) x <- x + rnorm(length(x), sd = .0001)}, how = "replace")
plot_pars_new(samplers, selection = "mu", show_chains = TRUE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = T, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
plot_pars_new(samplers, selection = "mu", show_chains = TRUE,
length.out = 900, true_pars = NULL,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
plot_pars_new(samplers, selection = "mu", show_chains = TRUE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
plot_pars_new(samplers, selection = "mu", show_chains = FALSE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
devtools::load_all()
true_samplers <- rapply(samplers, function(x){if(is.numeric(x)) x <- x + rnorm(length(x), sd = .0001)}, how = "replace")
plot_pars_new(samplers, selection = "mu", show_chains = FALSE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
plot_pars_new(samplers, selection = "covariance", show_chains = FALSE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
plot_pars_new(samplers, selection = "covariance", show_chains = TRUE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
devtools::load_all()
true_samplers <- rapply(samplers, function(x){if(is.numeric(x)) x <- x + rnorm(length(x), sd = .00001)}, how = "replace")
plot_pars_new(samplers, selection = "covariance", show_chains = TRUE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
true_samplers <- rapply(samplers, function(x){if(is.numeric(x)) x <- x}, how = "replace")
plot_pars_new(samplers, selection = "covariance", show_chains = TRUE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
load("~/Documents/UVA/2022/EMC2/test_new_obj.RData")
true_samplers <- rapply(samplers, function(x){if(is.numeric(x)) x <- x}, how = "replace")
plot_pars_new(samplers, selection = "covariance", show_chains = TRUE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
plot_pars_new(samplers, selection = "covariance", show_chains = TRUE,
length.out = 900, true_pars = samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
plot_pars_new(samplers, selection = "correlation", show_chains = TRUE,
length.out = 900, true_pars = samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
true_samplers <- rapply(samplers, function(x){if(is.numeric(x)) x <- x + rnorm(length(x), sd = .001)}, how = "replace")
plot_pars_new(samplers, selection = "correlation", show_chains = TRUE,
length.out = 900, true_pars = samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
plot_pars_new(samplers, selection = "correlation", show_chains = TRUE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list())
load("~/Documents/UVA/2022/EMC2/test_new_obj.RData")
true_samplers <- rapply(samplers, function(x){if(is.numeric(x)) x <- x + rnorm(length(x), sd = .001)}, how = "replace")
plot_pars_new(samplers, selection = "correlation", show_chains = TRUE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list(col = "blue", lwd = 2))
devtools::load_all()
plot_pars_new(samplers, selection = "correlation", show_chains = TRUE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list(col = "blue", lwd = 2))
plot_pars_new(samplers, selection = "correlation", show_chains = TRUE,
length.out = 900, true_pars = true_samplers,
use_prior_lim = F, cex.axis = 1.5, cex.lab = 1.5,
prior_plot_args = list(col = "purple", lty = 3),
true_plot_args = list(col = "blue", lwd = .3))
devtools::load_all()
t(1:10)
matrix(1:10)
devtools::load_all()
load("~/Documents/UVA/2022/EMC2/test_new_obj.RData")
load("~/Documents/UVA/2022/EMC2/test_new_obj2.RData")
plot_recovery(samplers, true_samplers, selection = "correlation")
plot_recovery(samplers, true_samplers, selection = "correlation")
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "correlation")
plot_recovery(samplers, true_samplers, selection = "correlation",
stat = "coverage")
debug(get_recovery_stats)
plot_recovery(samplers, true_samplers, selection = "correlation",
stat = "coverage")
(quants[,3] > true_pars)
(quants[,2] < true_pars)
(quants[,3] > true_pars)  & (quants[,2] < true_pars)
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "correlation",
stat = "coverage")
plot_recovery(samplers, true_samplers, selection = "correlation",
stat = "coverage", flatten = TRUE)
plot_recovery(samplers, true_samplers, selection = "alpha",
stat = "coverage", flatten = TRUE)
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "correlation")
devtools::load_all()
debug(make_recov_summary)
plot_recovery(samplers, true_samplers, selection = "correlation")
true
rec
stats
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "correlation")
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "alpha",
stat = "coverage", flatten = TRUE)
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "alpha",
stat = "coverage", flatten = TRUE)
tests <- plot_recovery(samplers, true_samplers, selection = "alpha",
stat = "coverage", flatten = TRUE)
tests
devtools::load_all()
debug(plot_recovery)
tests <- plot_recovery(samplers, true_samplers, selection = "alpha",
stat = "coverage", flatten = TRUE)
true_MCMC_samples
debug(get_recovery_stats)
quants_true
true_pars
devtools::load_all()
debug(plot_recovery)
tests <- plot_recovery(samplers, true_samplers, selection = "alpha",
stat = "coverage", flatten = TRUE)
true_pars
debug(get_recovery_stats)
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "correlation")
plot_recovery(samplers, true_samplers, selection = "correlation")
tests <- plot_recovery(samplers, true_samplers, selection = "alpha",
stat = "coverage", flatten = TRUE)
devtools::load_all()
debug(plot_recovery)
tests <- plot_recovery(samplers, true_samplers, selection = "alpha",
stat = "coverage", flatten = TRUE)
debug(get_recovery_stats)
quants_true
true_pars
devtools::load_all()
debug(plot_recovery)
devtools::load_all()
tests <- plot_recovery(samplers, true_samplers, selection = "alpha",
stat = "coverage", flatten = TRUE)
tests
tests <- plot_recovery(samplers, true_samplers, selection = "mu",
stat = "coverage", flatten = TRUE)
tests
devtools::load_all()
tests <- plot_recovery(samplers, true_samplers, selection = "mu",
stat = "coverage", flatten = TRUE)
tests <- plot_recovery(samplers, true_samplers, selection = "mu",
stat = "coverage", flatten = TRUE, do_CI = F)
tests <- plot_recovery(samplers, true_samplers, selection = "mu",
stat = "coverage", flatten = TRUE, do_CI = T,
chain = 1)
tests <- plot_recovery(samplers, true_samplers, selection = "mu",
stat = "coverage", flatten = TRUE, do_CI = T,
chain = 2)
tests <- plot_recovery(samplers, true_samplers, selection = "mu",
stat = "rmse", flatten = TRUE, do_CI = T,
chain = 2)
devtools::load_all()
tests <- plot_recovery(samplers, true_samplers, selection = "mu",
stat = "rmse", flatten = TRUE, do_CI = T,
chain = 2)
devtools::load_all()
tests <- plot_recovery(samplers, true_samplers, selection = "mu",
stat = "rmse", flatten = TRUE, do_CI = T,
chain = 2)
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "correlation")
plot_recovery(samplers, true_samplers, selection = "alpha")
plot_recovery(samplers, true_samplers, selection = "alpha",
col = "green")
plot_recovery(samplers, true_samplers, selection = "alpha",
col = "green", cex = 3)
plot_recovery(samplers, true_samplers, selection = "alpha",
col = "green", cex = 3, ci_plot_args = list(
col = "purple", lty = 3,
))
plot_recovery(samplers, true_samplers, selection = "alpha",
col = "green", cex = 3, ci_plot_args = list(
col = "purple", lty = 3
))
plot_recovery(samplers, true_samplers, selection = "alpha")
plot_recovery(samplers, true_samplers, selection = "correlation")
devtools::load_all()
tests <- plot_recovery(samplers, true_samplers, selection = "mu",
stat = "rmse", flatten = TRUE, do_CI = T,
chain = 2)
plot_recovery(samplers, true_samplers, selection = "mu")
plot_recovery(samplers, true_samplers, selection = "mu",
col = "blue", cex = 5, ci_plot_args = list(
col = "green", lty = 2
))
plot_recovery(samplers, true_samplers, selection = "mu",
col = "blue", cex = 5, ci_plot_args = list(
col = "green", lty = 2
), xlab = "Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu",
col = "blue", cex = 5, ci_plot_args = list(
col = "green", lty = 2
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 5, ci_plot_args = list(
col = "green", lty = 2
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 5, ci_plot_args = list(
col = "green", lty = 2
), xlab = "Dick Size", ylab = "Estimated Dick Size",
xlim = c(-.2, .2))
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 5, ci_plot_args = list(
col = "green", lty = 2
), xlab = "Dick Size", ylab = "Estimated Dick Size",
xlim = c(-.5, .5))
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 5, lty = 3, ci_plot_args = list(
col = "green", lty = 2
), xlab = "Dick Size", ylab = "Estimated Dick Size",
xlim = c(-.5, .5))
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 5, pch = 3, ci_plot_args = list(
col = "green", lty = 2
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 5, pch = 21, ci_plot_args = list(
col = "green", lty = 2
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 5, pch = 7, ci_plot_args = list(
col = "green", lty = 2
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 15
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu")
plot_recovery(samplers, true_samplers, selection = "mu", pch =2)
plot_recovery(samplers, true_samplers, selection = "mu", pch =3)
plot_recovery(samplers, true_samplers, selection = "mu", pch =1)
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 2
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 45
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "mu", stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 135
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "correlation", flatten = TRUE, stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 135
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "correlation", flatten = F, stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 135
), xlab = "Dick Size", ylab = "Estimated Dick Size")
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "correlation", flatten = F, stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 135
), xlab = "Dick Size", ylab = "Estimated Dick Size")
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "correlation", flatten = F, stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 135
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "correlation", flatten = T, stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 135
), xlab = "Dick Size", ylab = "Estimated Dick Size")
debug(plot_recovery)
plot_recovery(samplers, true_samplers, selection = "correlation", flatten = T, stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 135
), xlab = "Dick Size", ylab = "Estimated Dick Size")
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "correlation", flatten = T, stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 135
), xlab = "Dick Size", ylab = "Estimated Dick Size")
plot_recovery(samplers, true_samplers, selection = "correlation", flatten = F, stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 135
), xlab = "Dick Size", ylab = "Estimated Dick Size")
devtools::load_all()
plot_recovery(samplers, true_samplers, selection = "correlation", flatten = F, stat = "coverage",
col = "blue", cex = 2, pch = 7, ci_plot_args = list(
col = "green", lty = 2, lwd = 3, angle = 135
))
devtools::load_all()
# When working with lM it is useful to design  an "average and difference"
# contrast matrix, which for binary responses has a simple canonical from:
ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"d"))
# We also define a match function for lM
matchfun=function(d)d$S==d$lR
# We now construct our design, with v ~ lM and the contrast for lM the ADmat.
design <- make_design(data = forstmann,model=LNR,matchfun=matchfun,
formula=list(m~lM + E,s~1,t0~1),
contrasts=list(m=list(lM=ADmat)))
p_vector <- sampled_p_vector(design)
p_vector[1:6] <- c(-1, -.5, .1, .1, -1, -2)
debug(profile_plot)
profile_plot(forstmann, design, p_vector)
p_min
p_vector
is.vector(matrix(rnorm(100)))
is.vector(rnorm(100))
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_v.RData")
test <- lapply(fit_DDMa, remove_iterations)
rm(list = ls())
devtools::load_all()
test <- lapply(fit_DDMa, remove_iterations)
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_B.RData")
test <- lapply(fit_DDMa, remove_iterations)
test
summary(test)
class(fit_DDMa)
class(test) <- "emc"
summary(test)
test[[1]]$samples$theta_mu
debug(remove_iterations)
test <- lapply(fit_DDMa, remove_iterations)
filter_idx
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_B.RData")
# debug(remove_iterations)
test <- lapply(fit_DDMa, remove_iterations)
debug(remove_iterations)
test <- lapply(fit_DDMa, remove_iterations)
filter_idx
attr(fit_DDMa, "design_list")
attributes(fit_DDMa)
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_B.RData")
# debug(remove_iterations)
test <- lapply(fit_DDMa, remove_iterations)
# debug(remove_iterations)
test <- remove_iterations(fit_DDMa)
debug(remove_iterations)
test <- remove_iterations(fit_DDMa)
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_B.RData")
# debug(remove_iterations)
test <- remove_iterations(fit_DDMa)
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_B.RData")
# debug(remove_iterations)
test <- remove_iterations(fit_DDMa)
test[[1]]$samples$alpha
summary(test)
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_B.RData")
# debug(remove_iterations)
test <- remove_iterations(fit_DDMa)
class(test) <- "emc"
summary(test)
gd_summary_new(test, selection = "mu")
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_B.RData")
# debug(remove_iterations)
test <- remove_iterations(fit_DDMa, length.out = 2000)
class(test) <- "emc"
gd_summary_new(test, selection = "mu")
gd_summary_new(fit_DDMa, selection = "mu")
gd_summary_new(fit_DDMa, selection = "alpha")
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_B.RData")
# debug(remove_iterations)
fit_DDMa <- remove_iterations(fit_DDMa, length.out = 1000)
gd_summary_new(fit_DDMa, selection = "alpha")
chain_n(test)
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_B.RData")
# debug(remove_iterations)
fit_DDMa <- remove_iterations(fit_DDMa, length.out = 1000)
fit_LBA <- remove_iterations(fit_LBA, length.out = 1000)
fit_LBAt0 <- remove_iterations(fit_LBAt0, length.out = 1000)
fit_LBAv <- remove_iterations(fit_LBAv, length.out = 1000)
fit_LBAB <- remove_iterations(fit_LBAB, length.out = 1000)
gd_summary_new(fit_DDMa, selection = "alpha")
chain_n(fit_DDMa)
gd_summary_new(fit_DDMa, selection = "alpha")
gd_summary_new(fit_LBA, selection = "alpha")
gd_summary_new(fit_LBAt0, selection = "alpha")
gd_summary_new(fit_LBAv, selection = "alpha")
gd_summary_new(fit_LBAB, selection = "alpha")
save(fit_LBA, fit_LBAB, fit_LBAt0, fit_LBAv, fit_DDMa, pp, file = "~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_B.RData")
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_t0.RData")
# debug(remove_iterations)
fit_DDMa <- remove_iterations(fit_DDMa, length.out = 1000)
fit_LBA <- remove_iterations(fit_LBA, length.out = 1000)
fit_LBAt0 <- remove_iterations(fit_LBAt0, length.out = 1000)
fit_LBAv <- remove_iterations(fit_LBAv, length.out = 1000)
fit_LBAB <- remove_iterations(fit_LBAB, length.out = 1000)
gd_summary_new(fit_DDMa, selection = "alpha")
gd_summary_new(fit_LBA, selection = "alpha")
gd_summary_new(fit_LBAt0, selection = "alpha")
gd_summary_new(fit_LBAv, selection = "alpha")
gd_summary_new(fit_LBAB, selection = "alpha")
save(fit_LBA, fit_LBAB, fit_LBAt0, fit_LBAv, fit_DDMa, pp, file = "~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_t0.RData")
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_v.RData")
# debug(remove_iterations)
fit_DDMa <- remove_iterations(fit_DDMa, length.out = 1000)
fit_LBA <- remove_iterations(fit_LBA, length.out = 1000)
fit_LBAt0 <- remove_iterations(fit_LBAt0, length.out = 1000)
fit_LBAv <- remove_iterations(fit_LBAv, length.out = 1000)
fit_LBAB <- remove_iterations(fit_LBAB, length.out = 1000)
gd_summary_new(fit_DDMa, selection = "alpha")
gd_summary_new(fit_LBA, selection = "alpha")
gd_summary_new(fit_LBAt0, selection = "alpha")
gd_summary_new(fit_LBAv, selection = "alpha")
gd_summary_new(fit_LBAB, selection = "alpha")
save(fit_LBA, fit_LBAB, fit_LBAt0, fit_LBAv, fit_DDMa, pp, file = "~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_v.RData")
gd_summary_new(fit_DDMa, selection = "mu")
gd_summary_new(fit_LBA, selection = "mu")
gd_summary_new(fit_LBAt0, selection = "mu")
gd_summary_new(fit_LBAv, selection = "mu")
gd_summary_new(fit_LBAB, selection = "mu")
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_t0.RData")
# debug(remove_iterations)
# fit_DDMa <- remove_iterations(fit_DDMa, length.out = 1000)
# fit_LBA <- remove_iterations(fit_LBA, length.out = 1000)
# fit_LBAt0 <- remove_iterations(fit_LBAt0, length.out = 1000)
# fit_LBAv <- remove_iterations(fit_LBAv, length.out = 1000)
# fit_LBAB <- remove_iterations(fit_LBAB, length.out = 1000)
gd_summary_new(fit_DDMa, selection = "mu")
gd_summary_new(fit_LBA, selection = "mu")
gd_summary_new(fit_LBAt0, selection = "mu")
gd_summary_new(fit_LBAv, selection = "mu")
gd_summary_new(fit_LBAB, selection = "mu")
rm(list = ls())
devtools::load_all()
load("~/Documents/UVA/2024/S2C/S2Cexam/ExamSamples/all_samples_B.RData")
# debug(remove_iterations)
# fit_DDMa <- remove_iterations(fit_DDMa, length.out = 1000)
# fit_LBA <- remove_iterations(fit_LBA, length.out = 1000)
# fit_LBAt0 <- remove_iterations(fit_LBAt0, length.out = 1000)
# fit_LBAv <- remove_iterations(fit_LBAv, length.out = 1000)
# fit_LBAB <- remove_iterations(fit_LBAB, length.out = 1000)
gd_summary_new(fit_DDMa, selection = "mu")
gd_summary_new(fit_LBA, selection = "mu")
gd_summary_new(fit_LBAt0, selection = "mu")
gd_summary_new(fit_LBAv, selection = "mu")
gd_summary_new(fit_LBAB, selection = "mu")
