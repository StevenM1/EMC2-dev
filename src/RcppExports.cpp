// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calc_ll
NumericVector calc_ll(NumericMatrix p_matrix, DataFrame data, NumericVector constants, List designs, const int n_trials, String type, CharacterVector p_types, LogicalVector winner, NumericVector expand, double min_ll);
RcppExport SEXP _EMC2_calc_ll(SEXP p_matrixSEXP, SEXP dataSEXP, SEXP constantsSEXP, SEXP designsSEXP, SEXP n_trialsSEXP, SEXP typeSEXP, SEXP p_typesSEXP, SEXP winnerSEXP, SEXP expandSEXP, SEXP min_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p_matrix(p_matrixSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type constants(constantsSEXP);
    Rcpp::traits::input_parameter< List >::type designs(designsSEXP);
    Rcpp::traits::input_parameter< const int >::type n_trials(n_trialsSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type p_types(p_typesSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type winner(winnerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expand(expandSEXP);
    Rcpp::traits::input_parameter< double >::type min_ll(min_llSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ll(p_matrix, data, constants, designs, n_trials, type, p_types, winner, expand, min_ll));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EMC2_calc_ll", (DL_FUNC) &_EMC2_calc_ll, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_EMC2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
